(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 9.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       157,          7]
NotebookDataLength[    263128,       5940]
NotebookOptionsPosition[    261273,       5878]
NotebookOutlinePosition[    261627,       5894]
CellTagsIndexPosition[    261584,       5891]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "simplify sum((1+z)^-i), i=1 to n", 
   Typeset`opts$$ = {
   AppearanceElements -> {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "Result", "Results", 1, 3, "Output", "-((-1 + (1 + z)^(-n))/z)"}, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "Input", "numsubpods" -> "1", 
     "position" -> "100", "scanner" -> "Identity", "title" -> 
     "Input interpretation"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"simplify\"", {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    StyleBox[
                    FormBox[
                    TagBox[
                    StyleBox[
                    RowBox[{
                    UnderoverscriptBox["\[Sum]", 
                    RowBox[{"i", "=", "1"}], "n"], 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "+", "z"}], ")"}], 
                    RowBox[{"-", "i"}]]}], ScriptLevel -> 0, StripOnInput -> 
                    False], HoldForm], TraditionalForm], ScriptLevel -> 0, 
                    StripOnInput -> False]}}, GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    Global`TagBoxWrapper["Separator" -> " | "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnsEqual -> False, RowsEqual -> False, 
               GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
               AllowScriptLevelChange -> False], 
              Global`TagBoxWrapper["Separator" -> " | "]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}]}], Typeset`pod2$$ = 
   XMLElement[
   "pod", {"error" -> "false", "id" -> "Result", "numsubpods" -> "3", 
     "position" -> "200", "primary" -> "true", "scanner" -> "Simplification", 
     "title" -> "Results"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["moutput", {}, {"-((-1 + (1 + z)^(-n))/z)"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{"-", 
               FractionBox[
                RowBox[{
                  SuperscriptBox[
                   RowBox[{"(", 
                    RowBox[{"z", "+", "1"}], ")"}], 
                   RowBox[{"-", "n"}]], "-", "1"}], "z"]}], Identity], 
            TraditionalForm]], "Output", {}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Simplify[(1 - (1 + z)^(-n))/z]"}], 
       XMLElement["moutput", {}, {"(1 - (1 + z)^(-n))/z"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FractionBox[
              RowBox[{"1", "-", 
                SuperscriptBox[
                 RowBox[{"(", 
                   RowBox[{"z", "+", "1"}], ")"}], 
                 RowBox[{"-", "n"}]]}], "z"], Identity], TraditionalForm]], 
          "Output", {}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["moutput", {}, {"z^(-1) - 1/(z (1 + z)^n)"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               FractionBox["1", "z"], "-", 
               FractionBox[
                SuperscriptBox[
                 RowBox[{"(", 
                   RowBox[{"z", "+", "1"}], ")"}], 
                 RowBox[{"-", "n"}]], "z"]}], Identity], TraditionalForm]], 
          "Output", {}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {"name" -> "More", "input" -> "Result__More"}, {}]}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "3D plots", "scanner" -> "Simplification", "id" -> 
     "3DPlot", "position" -> "300", "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> "Real part"}, {
       XMLElement[
       "minput", {}, {
        "Plot3D[Re[(1 - (1 + z)^(-n))/z], {n, -10., 10.}, {z, -10., 10.}]"}], 
       
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`density$$ = 15, 
                 CalculateUtilities`GraphicsUtilities`Private`max1418$$ = 0.5,
                  CalculateUtilities`GraphicsUtilities`Private`max1420$$ = 
                 0.5, CalculateUtilities`GraphicsUtilities`Private`min1417$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`min1419$$ = -0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`xmesh$$ = True, 
                 CalculateUtilities`GraphicsUtilities`Private`ymesh$$ = True, 
                 CalculateUtilities`GraphicsUtilities`Private`zmesh$$ = False,
                  Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min1417$$], \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["n", TraditionalForm]], "min"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max1418$$], 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["n", TraditionalForm]], "max"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min1419$$], \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["z", TraditionalForm]], "min"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max1420$$], 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["z", TraditionalForm]], "max"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`xmesh$$], 
                    True, "x"}, {True, False}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`ymesh$$], 
                    True, "y"}, {True, False}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`zmesh$$], 
                    False, "z"}, {True, False}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`density$$], 
                    15, "mesh density"}, 1, 30, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}, {
                    Manipulate`Place[3], 
                    Manipulate`Place[4]}}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Grid[{{"mesh:", 
                    Manipulate`Place[5], 
                    Manipulate`Place[6], 
                    Manipulate`Place[7]}}], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}, {"", 
                    Item[
                    Manipulate`Place[8], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$632819$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min1417$\
632824$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max1418$632825$$ = 
                 0, CalculateUtilities`GraphicsUtilities`Private`min1419$\
632826$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max1420$632827$$ = 
                 0, CalculateUtilities`GraphicsUtilities`Private`xmesh$632828$\
$ = False, CalculateUtilities`GraphicsUtilities`Private`ymesh$632829$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`zmesh$\
632830$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`density$632831$$\
 = 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`density$$ = 
                    15, CalculateUtilities`GraphicsUtilities`Private`max1418$$\
 = 0.5, CalculateUtilities`GraphicsUtilities`Private`max1420$$ = 0.5, 
                    CalculateUtilities`GraphicsUtilities`Private`min1417$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`min1419$$ = -0.5, 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, 
                    CalculateUtilities`GraphicsUtilities`Private`xmesh$$ = 
                    True, CalculateUtilities`GraphicsUtilities`Private`ymesh$$\
 = True, CalculateUtilities`GraphicsUtilities`Private`zmesh$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$632819$$\
, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min1417$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min1417$\
632824$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max1418$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max1418$\
632825$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min1419$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min1419$\
632826$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max1420$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max1420$\
632827$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`xmesh$$, 
                    CalculateUtilities`GraphicsUtilities`Private`xmesh$632828$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`ymesh$$, 
                    CalculateUtilities`GraphicsUtilities`Private`ymesh$632829$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`zmesh$$, 
                    CalculateUtilities`GraphicsUtilities`Private`zmesh$632830$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`density$$, 
                    CalculateUtilities`GraphicsUtilities`Private`density$\
632831$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Function[Null, 
                    
                    Plot3D[#, #2, #3, Mesh -> 
                    CalculateUtilities`GraphicsUtilities`Private`density$$, 
                    MeshFunctions :> Flatten[{
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`xmesh$$, #& \
, {}], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`ymesh$$, #2& \
, {}], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`zmesh$$, #3& \
, {}]}], 
                    SlotSequence[4]], HoldAll][
                    
                    Re[$CellContext`z^(-1) (
                    1 - (1 + $CellContext`z)^(-$CellContext`n))], \
{$CellContext`n, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min1417$$], 
                    (
                    Piecewise[{{
                    0. + 10.690449676496973` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    10.690449676496973` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min1417$$], \
-10.], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min1417$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max1418$$]], \

                    (
                    Piecewise[{{
                    0. + 10.690449676496973` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    10.690449676496973` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min1417$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max1418$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min1417$$ + 
                    0.02, CalculateUtilities`GraphicsUtilities`Private`\
max1418$$]], 10.]}, {$CellContext`z, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min1419$$], 
                    (
                    Piecewise[{{
                    0. + 10.690449676496973` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    10.690449676496973` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min1419$$], \
-10.], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min1419$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max1420$$]], \

                    (
                    Piecewise[{{
                    0. + 10.690449676496973` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    10.690449676496973` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min1419$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max1420$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min1419$$ + 
                    0.02, CalculateUtilities`GraphicsUtilities`Private`\
max1420$$]], 10.]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["n", TraditionalForm]], 
                    RawBoxes[
                    FormBox["z", TraditionalForm]]}, BoxRatios -> Automatic, 
                    ImageSize -> 240., PlotRange -> Automatic, ClippingStyle -> 
                    Opacity[0.25], AxesLabel -> {
                    RawBoxes[
                    FormBox["n", TraditionalForm]], 
                    RawBoxes[
                    FormBox["z", TraditionalForm]]}, MeshStyle -> 
                    Opacity[0.45], Mesh -> 20, ColorFunction :> (Blend[{
                    RGBColor[0.628962, 0.149248, 0.135592], 
                    RGBColor[1., 0.634379, 0.186801], 
                    RGBColor[1., 0.895537, 0.582162], 
                    RGBColor[1., 0.995346, 0.826535]}, #3]& ), AxesStyle :> 
                    Directive[
                    GrayLevel[0.65], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1], BoxStyle :> GrayLevel[0, 0.35]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min1417$$, \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["n", TraditionalForm]], "min"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max1418$$, 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["n", TraditionalForm]], "max"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 2}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min1419$$, \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["z", TraditionalForm]], "min"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 3}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max1420$$, 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["z", TraditionalForm]], "max"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 4}, {{
                    CalculateUtilities`GraphicsUtilities`Private`xmesh$$, 
                    True, "x"}, {True, False}, ControlPlacement -> 5}, {{
                    CalculateUtilities`GraphicsUtilities`Private`ymesh$$, 
                    True, "y"}, {True, False}, ControlPlacement -> 6}, {{
                    CalculateUtilities`GraphicsUtilities`Private`zmesh$$, 
                    False, "z"}, {True, False}, ControlPlacement -> 7}, {{
                    CalculateUtilities`GraphicsUtilities`Private`density$$, 
                    15, "mesh density"}, 1, 30, 1, ImageSize -> Tiny, 
                    ControlPlacement -> 8}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}, {
                    Manipulate`Place[3], 
                    Manipulate`Place[4]}}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Grid[{{"mesh:", 
                    Manipulate`Place[5], 
                    Manipulate`Place[6], 
                    Manipulate`Place[7]}}], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}, {"", 
                    Item[
                    Manipulate`Place[8], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   TrackedSymbols -> True, ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({None, 
                   ReleaseHold[
                    Uncompress[
                    "1:eJztVm1v0zAQbinv7/APkPiMtA4hPiAhtsGYNKAk5Xu9+\
JJauHZmO9vgz4PPbpJm7SrFdICm9MOpvjSP75577nrPjmSU9nu9nr5uzUfJaXoLT0+t2ZWzXBaCvj/\
LFWjNpEiv4bO71sRg9oCTH0C976Y1H6SaEePPb/B9wpOCEwPfDOPMMNCTfUXyKUt07RkpdmJ/\
MuEyIZz9hOevtoevt4YeBUMZEWNACb3dFjGfKqIh7SHQDWt2OBHf/\
fFJefxccB7DcQEiAf3IeseKUAsjBeGYTvCtV5qo+5iXIYISRS+dJSfOnbYXaKOYyMYwy/\
GNC7naaotLVKY9NQ9Katbpx0d/Gx/I2IXkPS5nd3b8hYVxtdg7L6p/Tt0Az2/\
bwit5upI3TO8dR9qIYSegl9l80bpKnpCqZV3wc6ouabZsNMaLJ0z9j3TItFkOY9g2DJgd2QqvVt4y/\
Mu28DLHlp9L+6E1X7yjBFw1GSq5fZK04PMomikPvEDbp6tz6/AY9yq+\
Y3SGVLDCiWycZbe47nhcgdc7Qoy1m2xAOqKeABHkYF3UcbvHMmZ2p0SRxALPr+\
uXPTaWdSgBd7avPROU2fHlCVm3NqE5SBfqTkwy/fpHxa3kcq7JkPcDYSADtVb0d7A+\
ypIr6FgGRhLjBU29BnNYJTUiKlj2gxIkzolgCMl+2Y/\
75h8uVgKp2leoLuVZHLjSnIUn0S8LfAgiM9Pmdh04uoLbFrOJ5Gmtuoil6eK02RzT/\
SbTjRuaAz2UhNCShA/0bk/o9oS/uCcs7cDdktAtCd2S0C0J3ZLw/y4JLmL8V/oN1RK2xg=="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {Background -> None}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["subpod", {"title" -> "Imaginary part"}, {
       XMLElement[
       "minput", {}, {
        "Plot3D[Im[(1 - (1 + z)^(-n))/z], {n, -10., 10.}, {z, -10., 10.}]"}], 
       
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`density$$ = 15, 
                 CalculateUtilities`GraphicsUtilities`Private`max1422$$ = 0.5,
                  CalculateUtilities`GraphicsUtilities`Private`max1424$$ = 
                 0.5, CalculateUtilities`GraphicsUtilities`Private`min1421$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`min1423$$ = -0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`xmesh$$ = True, 
                 CalculateUtilities`GraphicsUtilities`Private`ymesh$$ = True, 
                 CalculateUtilities`GraphicsUtilities`Private`zmesh$$ = False,
                  Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min1421$$], \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["n", TraditionalForm]], "min"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max1422$$], 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["n", TraditionalForm]], "max"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min1423$$], \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["z", TraditionalForm]], "min"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max1424$$], 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["z", TraditionalForm]], "max"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`xmesh$$], 
                    True, "x"}, {True, False}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`ymesh$$], 
                    True, "y"}, {True, False}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`zmesh$$], 
                    False, "z"}, {True, False}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`density$$], 
                    15, "mesh density"}, 1, 30, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}, {
                    Manipulate`Place[3], 
                    Manipulate`Place[4]}}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Grid[{{"mesh:", 
                    Manipulate`Place[5], 
                    Manipulate`Place[6], 
                    Manipulate`Place[7]}}], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}, {"", 
                    Item[
                    Manipulate`Place[8], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$632916$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min1421$\
632917$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max1422$632918$$ = 
                 0, CalculateUtilities`GraphicsUtilities`Private`min1423$\
632919$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max1424$632920$$ = 
                 0, CalculateUtilities`GraphicsUtilities`Private`xmesh$632921$\
$ = False, CalculateUtilities`GraphicsUtilities`Private`ymesh$632922$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`zmesh$\
632923$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`density$632924$$\
 = 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`density$$ = 
                    15, CalculateUtilities`GraphicsUtilities`Private`max1422$$\
 = 0.5, CalculateUtilities`GraphicsUtilities`Private`max1424$$ = 0.5, 
                    CalculateUtilities`GraphicsUtilities`Private`min1421$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`min1423$$ = -0.5, 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, CalculateUtilities`GraphicsUtilities`Private`xmesh$\
$ = True, CalculateUtilities`GraphicsUtilities`Private`ymesh$$ = True, 
                    CalculateUtilities`GraphicsUtilities`Private`zmesh$$ = 
                    False}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$632916$$\
, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min1421$$, 
                    
                    CalculateUtilities`GraphicsUtilities`Private`min1421$\
632917$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max1422$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max1422$\
632918$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min1423$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min1423$\
632919$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max1424$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max1424$\
632920$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`xmesh$$, 
                    CalculateUtilities`GraphicsUtilities`Private`xmesh$632921$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`ymesh$$, 
                    CalculateUtilities`GraphicsUtilities`Private`ymesh$632922$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`zmesh$$, 
                    CalculateUtilities`GraphicsUtilities`Private`zmesh$632923$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`density$$, 
                    CalculateUtilities`GraphicsUtilities`Private`density$\
632924$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Function[Null, 
                    
                    Plot3D[#, #2, #3, Mesh -> 
                    CalculateUtilities`GraphicsUtilities`Private`density$$, 
                    MeshFunctions :> Flatten[{
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`xmesh$$, #& \
, {}], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`ymesh$$, #2& \
, {}], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`zmesh$$, #3& \
, {}]}], 
                    SlotSequence[4]], HoldAll][
                    
                    Im[$CellContext`z^(-1) (
                    1 - (
                    1 + $CellContext`z)^(-$CellContext`n))], {$CellContext`n, 
                    
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min1421$$], 
                    (
                    Piecewise[{{
                    0. + 10.690449676496973` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    10.690449676496973` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min1421$$], \
-10.], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min1421$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max1422$$]], \

                    (
                    Piecewise[{{
                    0. + 10.690449676496973` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    10.690449676496973` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min1421$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max1422$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min1421$$ + 
                    0.02, CalculateUtilities`GraphicsUtilities`Private`\
max1422$$]], 10.]}, {$CellContext`z, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min1423$$], 
                    (
                    Piecewise[{{
                    0. + 10.690449676496973` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    10.690449676496973` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min1423$$], \
-10.], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min1423$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max1424$$]], \

                    (
                    Piecewise[{{
                    0. + 10.690449676496973` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    10.690449676496973` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min1423$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max1424$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min1423$$ + 
                    0.02, CalculateUtilities`GraphicsUtilities`Private`\
max1424$$]], 10.]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["n", TraditionalForm]], 
                    RawBoxes[
                    FormBox["z", TraditionalForm]]}, BoxRatios -> Automatic, 
                    ImageSize -> 240., PlotRange -> Automatic, ClippingStyle -> 
                    Opacity[0.25], AxesLabel -> {
                    RawBoxes[
                    FormBox["n", TraditionalForm]], 
                    RawBoxes[
                    FormBox["z", TraditionalForm]]}, MeshStyle -> 
                    Opacity[0.45], Mesh -> 20, ColorFunction :> (Blend[{
                    RGBColor[0.628962, 0.149248, 0.135592], 
                    RGBColor[1., 0.634379, 0.186801], 
                    RGBColor[1., 0.895537, 0.582162], 
                    RGBColor[1., 0.995346, 0.826535]}, #3]& ), AxesStyle :> 
                    Directive[
                    GrayLevel[0.65], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1], BoxStyle :> GrayLevel[0, 0.35]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min1421$$, \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["n", TraditionalForm]], "min"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max1422$$, 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["n", TraditionalForm]], "max"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 2}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min1423$$, \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["z", TraditionalForm]], "min"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 3}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max1424$$, 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["z", TraditionalForm]], "max"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 4}, {{
                    CalculateUtilities`GraphicsUtilities`Private`xmesh$$, 
                    True, "x"}, {True, False}, ControlPlacement -> 5}, {{
                    CalculateUtilities`GraphicsUtilities`Private`ymesh$$, 
                    True, "y"}, {True, False}, ControlPlacement -> 6}, {{
                    CalculateUtilities`GraphicsUtilities`Private`zmesh$$, 
                    False, "z"}, {True, False}, ControlPlacement -> 7}, {{
                    CalculateUtilities`GraphicsUtilities`Private`density$$, 
                    15, "mesh density"}, 1, 30, 1, ImageSize -> Tiny, 
                    ControlPlacement -> 8}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}, {
                    Manipulate`Place[3], 
                    Manipulate`Place[4]}}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Grid[{{"mesh:", 
                    Manipulate`Place[5], 
                    Manipulate`Place[6], 
                    Manipulate`Place[7]}}], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}, {"", 
                    Item[
                    Manipulate`Place[8], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   TrackedSymbols -> True, ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({None, 
                   ReleaseHold[
                    Uncompress[
                    "1:eJztVm1v0zAQbinv7/\
APkPiMYENIk5AQ29iYNKAk5XtvsZNauHawnb3w58FnN0mzdpViOkBT+uFUX5rHd889d71nRzJK+\
71eT1+35qPkJL2Fp6fW7MhpLgtBPpzmimrNpEiv4bO71sTU7FIOZ5R4301r9qSagvHnt/g+\
8KTgYOg3wzgzjOrxvoJ8whJde4aKHdufjLlMgLOf9PmbzY2tl1seBUMZgjFUCb3ZFjGfKNA07SHQDW\
u2OYjv/vikPH4uOI/\
pj4KKhOpH1jtSQCyMFMAxneBbrzRR9zEvA4KAIpfOkhPndtsLtFFMZCM6zfGNC7l61RYXVKY9NQ9Ka\
lbpx0d/Gx/I2IXkPS5nd3b8hYVxtdg7L6p/Tt0Az+/\
awit5spQ3TO89R9rAsGOqF9l80bpKnpCqZV3wM6ouabasNcaLJ0z9j3TItFkMY6NtGHR6ZCu8XHmL8\
K/bwsscW34m7YfWfPGOEnDZZKjk9kmSgs+\
iaKY88AJtn67OrcNj3Kv4jtEZUsEKJ7Jxlt3iuuNxBV7vCDHWbrwG6Yh6AkQ0p9ZFHLe7LGNmZwIKE\
gs8u65f9thI1qEE3Nm+\
9kwQZseXJ2TV2oTmIJ2rO5hk8vWPilvJ5VyTIe8HwtCMqpWiv4P1UZZcQUYyMJIYL2jqNZjDKqkhqG\
DZD0qQOAfBEJL9sh/3zT+crwRSta9QXcqzOHClOQ1Pol8W+\
JCKzEya23Xg6ApuW8wmkie16iKWpvPTZn1M95tMN25oDvRQEkJLEj7Quz2h2xP+\
4p6wsAN3S0K3JHRLQrckdEvC/7skuIjxX+k3KOe2/g=="]]}; Typeset`initDone$$ = True), 
                DynamicModuleValues :> {}, Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {Background -> None}]}], 
       XMLElement["dataformats", {}, {"minput"}]}]}], Typeset`pod4$$ = 
   XMLElement[
   "pod", {"title" -> "Contour plots", "scanner" -> "Simplification", "id" -> 
     "ContourPlot", "position" -> "400", "error" -> "false", "numsubpods" -> 
     "2"}, {
     XMLElement["subpod", {"title" -> "Real part"}, {
       XMLElement[
       "minput", {}, {
        "ContourPlot[Re[(1 - (1 + z)^(-n))/z], {n, -10., 10.}, {z, -10., \
10.}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max516$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`max518$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min515$$ = -0.5,
                  CalculateUtilities`GraphicsUtilities`Private`min517$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    
                    CalculateUtilities`GraphicsUtilities`Private`min515$$], \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["n", TraditionalForm]], "min"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max516$$], 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["n", TraditionalForm]], "max"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min517$$], \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["z", TraditionalForm]], "min"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max518$$], 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["z", TraditionalForm]], "max"]}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}, {
                    Manipulate`Place[3], 
                    Manipulate`Place[4]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$489240$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min515$\
489245$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max516$489246$$ = 
                 0, CalculateUtilities`GraphicsUtilities`Private`min517$\
489247$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max518$489248$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max516$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`max518$$\
 = 0.5, CalculateUtilities`GraphicsUtilities`Private`min515$$ = -0.5, 
                    CalculateUtilities`GraphicsUtilities`Private`min517$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$489240$$\
, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min515$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min515$\
489245$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max516$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max516$\
489246$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min517$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min517$\
489247$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max518$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max518$\
489248$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    ContourPlot[
                    
                    Re[$CellContext`z^(-1) (
                    1 - (1 + $CellContext`z)^(-$CellContext`n))], \
{$CellContext`n, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min515$$], 
                    (
                    Piecewise[{{
                    0. + 10.690449676496973` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    10.690449676496973` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min515$$], \
-10.], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min515$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max516$$]], 
                    (
                    Piecewise[{{
                    0. + 10.690449676496973` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    10.690449676496973` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min515$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max516$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min515$$ + 
                    0.02, CalculateUtilities`GraphicsUtilities`Private`max516$\
$]], 10.]}, {$CellContext`z, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min517$$], 
                    (
                    Piecewise[{{
                    0. + 10.690449676496973` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    10.690449676496973` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min517$$], \
-10.], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min517$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max518$$]], 
                    (
                    Piecewise[{{
                    0. + 10.690449676496973` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    10.690449676496973` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min517$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max518$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min517$$ + 
                    0.02, CalculateUtilities`GraphicsUtilities`Private`max518$\
$]], 10.]}, FrameLabel -> {
                    RawBoxes[
                    FormBox["n", TraditionalForm]], 
                    RawBoxes[
                    FormBox["z", TraditionalForm]]}, AspectRatio -> Automatic,
                     ImageSize -> 240., ClippingStyle -> Automatic, 
                    FrameLabel -> Automatic, RotateLabel -> False, 
                    PlotRangePadding -> 0, ColorFunction :> (Blend[{
                    RGBColor[
                    0.6289616235599298, 0.1492484931715877, 
                    0.1355916685740444], 
                    RGBColor[1., 0.634378576333257, 0.1868009460593576], 
                    RGBColor[1., 0.8955367360952163, 0.5821622034027619], 
                    RGBColor[
                    1., 0.9953459983215076, 0.826535439078355]}, #]& ), 
                    FrameStyle :> Directive[
                    GrayLevel[0, 0.5], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1]]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min515$$, \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["n", TraditionalForm]], "min"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max516$$, 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["n", TraditionalForm]], "max"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 2}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min517$$, \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["z", TraditionalForm]], "min"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 3}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max518$$, 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["z", TraditionalForm]], "max"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 4}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}, {
                    Manipulate`Place[3], 
                    Manipulate`Place[4]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   TrackedSymbols -> True, ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({None, 
                   ReleaseHold[
                    Uncompress[
                    "1:eJztVm1v0zAQbinv7/\
APkPiMxLoPICEhtsGYNKAk5XtvsZNauHZmO9vgz4PPbpJm7SrFdICm9MOpvjSP75577nrPjmSU9nu9\
nr5uzUfJSXoLT0+t2ZWzXBaCvD/LFdWaSZFew2d3rYmp2aMcflDifTet+SDVDIw/v8H3gScFB0O/\
GcaZYVRP9hXkU5bo2jNS7MT+ZMJlApz9pM+3X73eGg49CoYyAmOoEnrYFjGfKtA07SHQDWt2OIjv/\
vikPH4uOI/pcUFFQvUj6x0rIBZGCuCYTvCtV5qo+5iXAUFAkUtnyYlzp+\
0F2igmsjGd5fjGhVy9bIsLKtOemgclNev046O/jQ9k7ELyHpezOzv+wsK4WuydF9U/\
p26A57dt4ZU8XckbpveOI21g2AnVy2y+aF0lT0jVsi74OVWXNFs2GuPFE6b+\
Rzpk2iyHsdU2DDo7shVerbxl+O228DLHlp9L+6E1X7yjBFw1GSq5fZKk4PMomikPvEDbp6tz6/\
AY9yq+Y3SGVLDCiWycZbe47nhcgdc7Qoy1m2xAOqKeABHNqXURx+0ey5jZnYKCxALPr+\
uXPTaWdSgBd7avPROE2fHlCVm3NqE5SBfqDiaZfv2j4lZyOddkyPuBMDSjaq3o72B9lCVXkLEMjCTG\
C5p6DeawSmoEKlj2gxIkzkEwhGS/7Md98w8XK4FU7StUl/\
IsDlxpzsKT6JcFPqQiM9Pmdh04uoLbFrOJ5Gmtuoil6eK02RzT/SbTjRuaAz2UhNCShA/0bk/o9oS/\
uCcs7cDdktAtCd2S0C0J3ZLw/y4JLmL8V/oNKYe2/g=="]]}; Typeset`initDone$$ = True), 
                DynamicModuleValues :> {}, Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {Background -> None}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["subpod", {"title" -> "Imaginary part"}, {
       XMLElement[
       "minput", {}, {
        "ContourPlot[Im[(1 - (1 + z)^(-n))/z], {n, -10., 10.}, {z, -10., \
10.}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max520$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`max522$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min519$$ = -0.5,
                  CalculateUtilities`GraphicsUtilities`Private`min521$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min519$$], \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["n", TraditionalForm]], "min"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max520$$], 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["n", TraditionalForm]], "max"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min521$$], \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["z", TraditionalForm]], "min"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max522$$], 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["z", TraditionalForm]], "max"]}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}, {
                    Manipulate`Place[3], 
                    Manipulate`Place[4]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$489325$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min519$\
489326$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max520$489327$$ = 
                 0, CalculateUtilities`GraphicsUtilities`Private`min521$\
489328$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max522$489329$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max520$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`max522$$\
 = 0.5, CalculateUtilities`GraphicsUtilities`Private`min519$$ = -0.5, 
                    CalculateUtilities`GraphicsUtilities`Private`min521$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$489325$$\
, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min519$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min519$\
489326$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max520$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max520$\
489327$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min521$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min521$\
489328$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max522$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max522$\
489329$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    ContourPlot[
                    
                    Im[$CellContext`z^(-1) (
                    1 - (1 + $CellContext`z)^(-$CellContext`n))], \
{$CellContext`n, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min519$$], 
                    (
                    Piecewise[{{
                    0. + 10.690449676496973` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    10.690449676496973` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min519$$], \
-10.], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min519$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max520$$]], 
                    (
                    Piecewise[{{
                    0. + 10.690449676496973` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    10.690449676496973` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min519$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max520$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min519$$ + 
                    0.02, CalculateUtilities`GraphicsUtilities`Private`max520$\
$]], 10.]}, {$CellContext`z, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min521$$], 
                    (
                    Piecewise[{{
                    0. + 10.690449676496973` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    10.690449676496973` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min521$$], \
-10.], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min521$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max522$$]], 
                    (
                    Piecewise[{{
                    0. + 10.690449676496973` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    10.690449676496973` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min521$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max522$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min521$$ + 
                    0.02, CalculateUtilities`GraphicsUtilities`Private`max522$\
$]], 10.]}, FrameLabel -> {
                    RawBoxes[
                    FormBox["n", TraditionalForm]], 
                    RawBoxes[
                    FormBox["z", TraditionalForm]]}, AspectRatio -> Automatic,
                     ImageSize -> 240., ClippingStyle -> Automatic, 
                    FrameLabel -> Automatic, RotateLabel -> False, 
                    PlotRangePadding -> 0, ColorFunction :> (Blend[{
                    RGBColor[
                    0.6289616235599298, 0.1492484931715877, 
                    0.1355916685740444], 
                    RGBColor[1., 0.634378576333257, 0.1868009460593576], 
                    RGBColor[1., 0.8955367360952163, 0.5821622034027619], 
                    RGBColor[
                    1., 0.9953459983215076, 0.826535439078355]}, #]& ), 
                    FrameStyle :> Directive[
                    GrayLevel[0, 0.5], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1]]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min519$$, \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["n", TraditionalForm]], "min"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max520$$, 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["n", TraditionalForm]], "max"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 2}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min521$$, \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["z", TraditionalForm]], "min"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 3}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max522$$, 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["z", TraditionalForm]], "max"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 4}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}, {
                    Manipulate`Place[3], 
                    Manipulate`Place[4]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   TrackedSymbols -> True, ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({None, 
                   ReleaseHold[
                    Uncompress[
                    "1:eJztVm1v0zAQbikw3t/+\
ARKfkcb2YUhIiG1sTBpQkvK9t9hJLVw72M42+PPgs5ukWbtKMR2gKf1wqi/\
N47vnnrve8xMZpf1er6dvWvNBcpJu4OmZNXtymstCkPfnuaJaMynSG/jsnjUxNfuUww9KvO+\
2NQdSTcH48xt8H3hScDD0q2GcGUb1+FBBPmGJrj1DxU7tT8ZcJsDZT/pie+\
f11uaOR8FQhmAMVUJvtUXMJwo0TXsIdMuaXQ7imz8+LY+fCs5j+\
r2gIqH6sfWOFBALIwVwTCf41mtN1APMy4AgoMiVs+TEudv2Am0UE9mITnN841KuNtvigsq0p+\
ZhSc0q/fjo7+\
ADGbuQvMfl7M6Ov7Awrhd7F0X1z6kb4PltW3glz5byhum940gbGHZK9SKbL1tXyRNStawLfkbVFc2W\
tcZ4+YSp/5GOmTaLYbxqGwadntgKL1feIvx2W3iZY8vPpP3Ims/\
eUQIumwyV3D5KUvBZFM2UB16g7dPVuXV4jPsV3zE6QypY4UQ2zrJbXHc8qcDrHSHG2o3XIB1RT4CI5\
tS6iON2n2XM7E1AQWKBZ9f1yx4byTqUgDvb154Jwuz48oSsWpvQHKVzdQeTTL78UXEruVxoMuT9SBi\
aUbVS9HexPsqSK8hIBkYS4wVNvQZzWCU1BBUs+0EJEucgGEKyX/\
bjvvmH85VAqg4Vqkt5FgeuNOfhSfTLAh9TkZlJc7sOHF3BbYvZRPKsVl3E0nR+\
2qyP6X6T6cYNzYEeSkJoScIHercndHvCX9wTFnbgbknoloRuSeiWhG5J+H+XBBcx/iv9BhBBtx4="]\
]}; Typeset`initDone$$ = True), DynamicModuleValues :> {}, Deinitialization :> 
                None, UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {Background -> None}]}], 
       XMLElement["dataformats", {}, {"minput"}]}]}], Typeset`pod5$$, 
   Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, Typeset`pod9$$, 
   Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, Typeset`pod13$$, 
   Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, Typeset`pod17$$, 
   Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, Typeset`pod21$$, 
   Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, Typeset`pod25$$, 
   Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, Typeset`pod29$$, 
   Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, Typeset`pod33$$, 
   Typeset`pod34$$, Typeset`aux1$$ = {True, False, {False}, True}, 
   Typeset`aux2$$ = {True, False, {False}, True}, Typeset`aux3$$ = {
   True, False, {False}, True}, Typeset`aux4$$ = {True, False, {False}, True},
    Typeset`aux5$$ = {True, False, {False}, True}, Typeset`aux6$$ = {
   True, False, {False}, True}, Typeset`aux7$$ = {True, False, {False}, True},
    Typeset`aux8$$ = {True, False, {False}, True}, Typeset`aux9$$ = {
   True, False, {False}, True}, Typeset`aux10$$ = {
   True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`aux14$$ = {
   True, False, {False}, True}, Typeset`aux15$$ = {
   True, False, {False}, True}, Typeset`aux16$$ = {
   True, False, {False}, True}, Typeset`aux17$$ = {
   True, False, {False}, True}, Typeset`aux18$$ = {
   True, False, {False}, True}, Typeset`aux19$$ = {
   True, False, {False}, True}, Typeset`aux20$$ = {
   True, False, {False}, True}, Typeset`aux21$$ = {
   True, False, {False}, True}, Typeset`aux22$$ = {
   True, False, {False}, True}, Typeset`aux23$$ = {
   True, False, {False}, True}, Typeset`aux24$$ = {
   True, False, {False}, True}, Typeset`aux25$$ = {
   True, False, {False}, True}, Typeset`aux26$$ = {
   True, False, {False}, True}, Typeset`aux27$$ = {
   True, False, {False}, True}, Typeset`aux28$$ = {
   True, False, {False}, True}, Typeset`aux29$$ = {
   True, False, {False}, True}, Typeset`aux30$$ = {
   True, False, {False}, True}, Typeset`aux31$$ = {
   True, False, {False}, True}, Typeset`aux32$$ = {
   True, False, {False}, True}, Typeset`aux33$$ = {
   True, False, {False}, True}, Typeset`aux34$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = True, 
   Typeset`queryinfo$$ = {{
    "success" -> "true", "error" -> "false", "numpods" -> "4", "datatypes" -> 
     "Simplify", "timedout" -> "Simplification", "timedoutpods" -> "", 
     "timing" -> "1.948", "parsetiming" -> "0.673", "parsetimedout" -> 
     "false", "recalculate" -> 
     "http://www4c.wolframalpha.com/api/v2/recalc.jsp?id=\
MSPa21401hg9gah2i4hf57i00000315ei3g949e1097d&s=53", "id" -> 
     "MSPa21411hg9gah2i4hf57i00000153cf75f1a901f0d", "host" -> 
     "http://www4c.wolframalpha.com", "server" -> "53", "related" -> 
     "http://www4c.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa21421hg9gah2i4hf57i0000016c9fc30a4gh76ic&s=53", "version" -> "2.6", 
     "profile" -> "EnterDoQuery:0.,StartWrap:1.94823"}, {
    "success" -> "true", "error" -> "false", "numpods" -> "0", "datatypes" -> 
     "Simplify", "timedout" -> "", "timedoutpods" -> "", "timing" -> "1.064", 
     "parsetiming" -> "0.", "parsetimedout" -> "false", "recalculate" -> "", 
     "id" -> "", "host" -> "http://www4c.wolframalpha.com", "server" -> "53", 
     "related" -> "", "version" -> "2.6", "profile" -> 
     "EnterDoRecalculate:0."}}, Typeset`sessioninfo$$ = {
   "TimeZone" -> -5., 
    "Date" -> {2016, 2, 25, 22, 6, 51.146107`8.46138755811179}, "Line" -> 74, 
    "SessionID" -> 24654629599766856774}, Typeset`showpods$$ = {1, 2, 3, 4}, 
   Typeset`failedpods$$ = {5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 
   19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34}, 
   Typeset`chosen$$ = {
   "Result", "Results", 1, 3, "Output", "-((-1 + (1 + z)^(-n))/z)"}, 
   Typeset`open$$ = False, Typeset`newq$$ = 
   "simplify sum((1+z)^-i), i=1 to n"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
         Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
         Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
         Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
         Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
         Typeset`pod33$$, Typeset`pod34$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
         Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
         Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
         Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
         Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
         Typeset`aux33$$, Typeset`aux34$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{208., {45., 16.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; AlphaIntegration`DoAsyncInitialization[
       Hold[{
        2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
          Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
          Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
          Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
          Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
          Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
          Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
          Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
          Typeset`pod33$$, Typeset`pod34$$}, {
         Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
          Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
          Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
          Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
          Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
          Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
          Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
          Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
          Typeset`aux33$$, Typeset`aux34$$}, Typeset`chosen$$, Typeset`open$$,
          Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
         Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
         Typeset`failedpods$$, Typeset`newq$$, 
         "http://www4c.wolframalpha.com/api/v2/recalc.jsp?id=\
MSPa21401hg9gah2i4hf57i00000315ei3g949e1097d&s=53", Typeset`asyncpods$$}]]; 
     Typeset`asyncpods$$ = {}; Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput"],

Cell[BoxData[
 RowBox[{"-", 
  FractionBox[
   RowBox[{
    RowBox[{"-", "1"}], "+", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"1", "+", "z"}], ")"}], 
     RowBox[{"-", "n"}]]}], "z"]}]], "Output",
 CellChangeTimes->{3.66544481118585*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"WolframAlpha", "[", 
  RowBox[{"\"\<sum((1+z)^i), i=1 to n\>\"", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\"\<Result\>\"", ",", "1"}], "}"}], ",", 
     "\"\<FormulaData\>\""}], "}"}]}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"Hold", "[", 
  RowBox[{
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", "=", "1"}], "n"], 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"1", "+", "z"}], ")"}], "i"]}], "\[Equal]", 
   FractionBox[
    RowBox[{
     RowBox[{"(", 
      RowBox[{"1", "+", "z"}], ")"}], " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "1"}], "+", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"1", "+", "z"}], ")"}], "n"]}], ")"}]}], "z"]}], 
  "]"}]], "Output",
 CellChangeTimes->{3.665024194083304*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"WolframAlpha", "[", 
  RowBox[{"\"\<sum((1+z)^i), i=1 to n\>\"", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\"\<Result\>\"", ",", "1"}], "}"}], ",", "\"\<Input\>\""}], 
    "}"}]}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"HoldComplete", "[", 
  RowBox[{
   UnderoverscriptBox["\[Sum]", 
    RowBox[{"i", "=", "1"}], "n"], 
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"1", "+", "z"}], ")"}], "i"]}], "]"}]], "Output",
 CellChangeTimes->{3.6650241717878017`*^9}]
}, Open  ]],

Cell[BoxData["\[IndentingNewLine]"], "Input",
 CellChangeTimes->{3.6650185797442493`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryParseResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "taylor approximation ((1 + z)^2 (-1 + (1 + z)^n))/(z*n) for around 0", 
   Typeset`newq$$ = 
   "taylor approximation ((1 + z)^2 (-1 + (1 + z)^n))/(z*n) for around 0", 
   Typeset`chosen$$ = "Series[((1 + z)^2*(-1 + (1 + z)^n))/(n*z), {z, 0, 5}]",
    Typeset`open$$ = False}, 
   PaneSelectorBox[{False->
    DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
     WolframAlphaClient`Private`assumptionsQ$$ = False}, 
     TagBox[
      FrameBox[
       TagBox[GridBox[{
          {
           InputFieldBox[Dynamic[Typeset`newq$$], String,
            Appearance->None,
            BaseStyle->{"CalculateInput"},
            ContinuousAction->True,
            Enabled->True,
            FieldSize->{{1, 40}, {1, 
               DirectedInfinity[1]}},
            TrapSelection->False], 
           ItemBox[
            ButtonBox[
             PaneSelectorBox[{True->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "OrangeSquarePlus"],
                 ImageSizeCache->{10., {3., 8.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ], False->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "GraySquarePlus"],
                 ImageSizeCache->{10., {3., 8.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ]}, Dynamic[WolframAlphaClient`Private`show$$],
              ImageSize->All],
             Appearance->None,
             ButtonFunction:>(Quiet[
                WolframAlpha[]]; If[
                Or[
                 CurrentValue["OptionKey"], 
                 CurrentValue["AltKey"]], SelectionMove[
                  ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                  Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                   "TextForm"], All], Typeset`open$$ = True; 
                WolframAlphaClient`Private`extrudeFromFastParse[
                 "taylor approximation ((1 + z)^2 (-1 + (1 + z)^n))/(z*n) for \
around 0", 
                  Defer[
                   
                   Series[((1 + Global`z)^2 (-1 + (1 + Global`z)^Global`n))/(
                    Global`n Global`z), {Global`z, 0, 5}]], "Fast parse"]; 
                Typeset`open$$ = False]),
             Evaluator->Automatic,
             Method->"Queued"],
            Alignment->{Right, Top},
            StripOnInput->False]},
          {
           PaneBox[
            TagBox[
             TooltipBox[
              ButtonBox[
               PaneSelectorBox[{False->
                StyleBox[
                 RowBox[{"Series", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", " ", "+", " ", "z"}], ")"}], "^", "2"}], "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "1"}], " ", "+", " ", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", " ", "+", " ", "z"}], ")"}], "^", "n"}]}], 
                    ")"}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"n", "*", "z"}], ")"}]}], ",", " ", 
                   RowBox[{"{", 
                    RowBox[{"z", ",", " ", "0", ",", " ", "5"}], "}"}]}], 
                  "]"}],
                 StripOnInput->False,
                 NumberMarks->False], True->
                StyleBox[
                 RowBox[{"Series", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", " ", "+", " ", "z"}], ")"}], "^", "2"}], "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "1"}], " ", "+", " ", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", " ", "+", " ", "z"}], ")"}], "^", "n"}]}], 
                    ")"}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"n", "*", "z"}], ")"}]}], ",", " ", 
                   RowBox[{"{", 
                    RowBox[{"z", ",", " ", "0", ",", " ", "5"}], "}"}]}], 
                  "]"}],
                 StripOnInput->False,
                 ShowSyntaxStyles->False,
                 NumberMarks->False,
                 FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                 CurrentValue["MouseOver"]],
                BaseStyle->{ShowStringCharacters -> True},
                FrameMargins->0,
                ImageSize->Automatic],
               Alignment->Left,
               Appearance->None,
               BaseStyle->{},
               ButtonFunction:>(SelectionMove[
                  ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                   BoxData[
                    RowBox[{"Series", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", " ", "+", " ", "z"}], ")"}], "^", "2"}], "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "1"}], " ", "+", " ", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", " ", "+", " ", "z"}], ")"}], "^", "n"}]}], 
                    ")"}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"n", "*", "z"}], ")"}]}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"z", ",", " ", "0", ",", " ", "5"}], "}"}]}], 
                    "]"}]], "Input"], All]; SelectionMove[
                  ButtonNotebook[], After, CellContents]),
               Evaluator->Automatic,
               ImageSize->Automatic,
               Method->"Preemptive"],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
              "Tooltip"]& ],
            AppearanceElements->{},
            BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
            ImageSize->{Automatic, {1, 100}},
            Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         FrameStyle->GrayLevel[0.85],
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxDividers->{
          "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"],
       Alignment->Top,
       Background->Dynamic[
         FEPrivate`If[
          FEPrivate`And[
           FEPrivate`SameQ[
            FEPrivate`Head[Typeset`newq$$], String], 
           FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
          RGBColor[1., 0.975, 0.95], 
          GrayLevel[1]]],
       BaselinePosition->Baseline,
       FrameStyle->GrayLevel[0.85],
       ImageSize->Automatic,
       RoundingRadius->5,
       StripOnInput->False],
      EventHandlerTag[{
       "MouseEntered" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, True], "MouseExited" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, False], 
        PassEventsDown -> Automatic, PassEventsUp -> True}]],
     DynamicModuleValues:>{}], True->
    TagBox[GridBox[{
       {
        DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
         WolframAlphaClient`Private`assumptionsQ$$ = False}, 
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               InputFieldBox[Dynamic[Typeset`newq$$], String,
                Appearance->None,
                BaseStyle->{"CalculateInput"},
                ContinuousAction->True,
                Enabled->True,
                FieldSize->{{1, 40}, {1, 
                   DirectedInfinity[1]}},
                TrapSelection->False], 
               ItemBox[
                ButtonBox[
                 PaneSelectorBox[{True->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "OrangeSquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ], False->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "GraySquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ]}, Dynamic[
                  WolframAlphaClient`Private`show$$],
                  ImageSize->All],
                 Appearance->None,
                 ButtonFunction:>(Quiet[
                    WolframAlpha[]]; If[
                    Or[
                    CurrentValue["OptionKey"], 
                    CurrentValue["AltKey"]], SelectionMove[
                    ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                    NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                    "TextForm"], All], Typeset`open$$ = True; 
                    WolframAlphaClient`Private`extrudeFromFastParse[
                    "taylor approximation ((1 + z)^2 (-1 + (1 + z)^n))/(z*n) \
for around 0", 
                    Defer[
                    
                    Series[((1 + Global`z)^2 (-1 + (1 + Global`z)^Global`n))/(
                    Global`n Global`z), {Global`z, 0, 5}]], "Fast parse"]; 
                    Typeset`open$$ = False]),
                 Evaluator->Automatic,
                 Method->"Queued"],
                Alignment->{Right, Top},
                StripOnInput->False]},
              {
               PaneBox[
                TagBox[
                 TooltipBox[
                  ButtonBox[
                   PaneSelectorBox[{False->
                    StyleBox[
                    RowBox[{"Series", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", " ", "+", " ", "z"}], ")"}], "^", "2"}], "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "1"}], " ", "+", " ", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", " ", "+", " ", "z"}], ")"}], "^", "n"}]}], 
                    ")"}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"n", "*", "z"}], ")"}]}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"z", ",", " ", "0", ",", " ", "5"}], "}"}]}], 
                    "]"}],
                    StripOnInput->False,
                    NumberMarks->False], True->
                    StyleBox[
                    RowBox[{"Series", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", " ", "+", " ", "z"}], ")"}], "^", "2"}], "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "1"}], " ", "+", " ", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", " ", "+", " ", "z"}], ")"}], "^", "n"}]}], 
                    ")"}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"n", "*", "z"}], ")"}]}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"z", ",", " ", "0", ",", " ", "5"}], "}"}]}], 
                    "]"}],
                    StripOnInput->False,
                    ShowSyntaxStyles->False,
                    NumberMarks->False,
                    FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{ShowStringCharacters -> True},
                    FrameMargins->0,
                    ImageSize->Automatic],
                   Alignment->Left,
                   Appearance->None,
                   BaseStyle->{},
                   ButtonFunction:>(SelectionMove[
                    ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    BoxData[
                    RowBox[{"Series", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", " ", "+", " ", "z"}], ")"}], "^", "2"}], "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "1"}], " ", "+", " ", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", " ", "+", " ", "z"}], ")"}], "^", "n"}]}], 
                    ")"}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"n", "*", "z"}], ")"}]}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"z", ",", " ", "0", ",", " ", "5"}], "}"}]}], 
                    "]"}]], "Input"], All]; SelectionMove[
                    ButtonNotebook[], After, CellContents]),
                   Evaluator->Automatic,
                   ImageSize->Automatic,
                   Method->"Preemptive"],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                    StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
                  "Tooltip"]& ],
                AppearanceElements->{},
                BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
                ImageSize->{Automatic, {1, 100}},
                Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             BaselinePosition->{1, 1},
             FrameStyle->GrayLevel[0.85],
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxDividers->{
              "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           Alignment->Top,
           Background->Dynamic[
             FEPrivate`If[
              FEPrivate`And[
               FEPrivate`SameQ[
                FEPrivate`Head[Typeset`newq$$], String], 
               FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
              RGBColor[1., 0.975, 0.95], 
              GrayLevel[1]]],
           BaselinePosition->Baseline,
           FrameStyle->GrayLevel[0.85],
           ImageSize->Automatic,
           RoundingRadius->5,
           StripOnInput->False],
          
          EventHandlerTag[{
           "MouseEntered" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, True], 
            "MouseExited" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, False], 
            PassEventsDown -> Automatic, PassEventsUp -> True}]],
         DynamicModuleValues:>{}]},
       {
        InterpretationBox[
         StyleBox[
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEExpressions", "NecklaceAnimator"][20]],
          AnimatorBoxOptions->{ImageSize->20}],
         Animator[Appearance -> "Necklace", ImageSize -> 20],
         BaseStyle->{"Deploy"}]}
      },
      BaselinePosition->{1, 1},
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     
     "Column"]}, Dynamic[
     TrueQ[Typeset`open$$]],
    BaseStyle->{Deployed -> True},
    ImageSize->Automatic],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"1", "+", 
   RowBox[{
    FractionBox["1", "2"], " ", 
    RowBox[{"(", 
     RowBox[{"3", "+", "n"}], ")"}], " ", "z"}], "+", 
   RowBox[{
    FractionBox["1", "6"], " ", 
    RowBox[{"(", 
     RowBox[{"2", "+", 
      RowBox[{"3", " ", "n"}], "+", 
      SuperscriptBox["n", "2"]}], ")"}], " ", 
    SuperscriptBox["z", "2"]}], "+", 
   RowBox[{
    FractionBox["1", "24"], " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", "2"}], "-", "n", "+", 
      RowBox[{"2", " ", 
       SuperscriptBox["n", "2"]}], "+", 
      SuperscriptBox["n", "3"]}], ")"}], " ", 
    SuperscriptBox["z", "3"]}], "+", 
   RowBox[{
    FractionBox["1", "120"], " ", 
    RowBox[{"(", 
     RowBox[{"4", "-", 
      RowBox[{"5", " ", 
       SuperscriptBox["n", "2"]}], "+", 
      SuperscriptBox["n", "4"]}], ")"}], " ", 
    SuperscriptBox["z", "4"]}], "+", 
   RowBox[{
    FractionBox["1", "720"], " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", "12"}], "+", 
      RowBox[{"4", " ", "n"}], "+", 
      RowBox[{"15", " ", 
       SuperscriptBox["n", "2"]}], "-", 
      RowBox[{"5", " ", 
       SuperscriptBox["n", "3"]}], "-", 
      RowBox[{"3", " ", 
       SuperscriptBox["n", "4"]}], "+", 
      SuperscriptBox["n", "5"]}], ")"}], " ", 
    SuperscriptBox["z", "5"]}], "+", 
   InterpretationBox[
    SuperscriptBox[
     RowBox[{"O", "[", "z", "]"}], "6"],
    SeriesData[$CellContext`z, 0, {}, 0, 6, 1],
    Editable->False]}],
  SeriesData[$CellContext`z, 0, {
   1, Rational[1, 2] (3 + $CellContext`n), 
    Rational[1, 6] (2 + 3 $CellContext`n + $CellContext`n^2), 
    Rational[1, 24] (-2 - $CellContext`n + 
     2 $CellContext`n^2 + $CellContext`n^3), 
    Rational[1, 120] (4 - 5 $CellContext`n^2 + $CellContext`n^4), 
    Rational[1, 720] (-12 + 4 $CellContext`n + 15 $CellContext`n^2 - 
     5 $CellContext`n^3 - 3 $CellContext`n^4 + $CellContext`n^5)}, 0, 6, 1],
  Editable->False]], "Output",
 CellChangeTimes->{3.665444821800696*^9}],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "taylor approximation ((1 + z) (-1 + (1 + z)^n))/z for around 0", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {30, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "http://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
    
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Series[((1 + z) (-1 + (1 + z)^n))/z, {z, 0, 5}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"series\"", {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    StyleBox[
                    FractionBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", "+", "z"}], ")"}], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "1"}], "+", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "+", "z"}], ")"}], "n"]}], ")"}]}], 
                    PolynomialForm[#, TraditionalOrder -> False]& ], "z"], 
                    ScriptLevel -> 0, StripOnInput -> False], 
                    StyleBox["\"point\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False], 
                    RowBox[{"z", "\[LongEqual]", "0"}]}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None, None, None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    $CellContext`TagBoxWrapper["Separator" -> " | "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnsEqual -> False, RowsEqual -> False, 
               GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
               AllowScriptLevelChange -> False], 
              $CellContext`TagBoxWrapper["Separator" -> " | "]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {}]}], 
       XMLElement["dataformats", {}, {"plaintext,minput"}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Series expansion at z=0", "scanner" -> "Series", "id" -> 
     "SeriesExpansionAtZ = 0", "position" -> "200", "error" -> "false", 
     "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Series[((1 + z) (-1 + (1 + z)^n))/z, {z, 0, 6}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TagBox[
                 GridBox[{{
                    TemplateBox[{
                    RowBox[{"n", "+", 
                    RowBox[{
                    FractionBox["1", "2"], " ", "n", " ", 
                    RowBox[{"(", 
                    RowBox[{"n", "+", "1"}], ")"}], " ", "z"}], "+", 
                    RowBox[{
                    FractionBox["1", "6"], " ", "n", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    SuperscriptBox["n", "2"], "-", "1"}], ")"}], " ", 
                    SuperscriptBox["z", "2"]}], "+", 
                    RowBox[{
                    FractionBox["1", "24"], " ", "n", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    SuperscriptBox["n", "3"], "-", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["n", "2"]}], "-", "n", "+", "2"}], ")"}], 
                    " ", 
                    SuperscriptBox["z", "3"]}], "+", 
                    RowBox[{
                    FractionBox["1", "120"], " ", "n", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    SuperscriptBox["n", "4"], "-", 
                    RowBox[{"5", " ", 
                    SuperscriptBox["n", "3"]}], "+", 
                    RowBox[{"5", " ", 
                    SuperscriptBox["n", "2"]}], "+", 
                    RowBox[{"5", " ", "n"}], "-", "6"}], ")"}], " ", 
                    SuperscriptBox["z", "4"]}], "+", 
                    RowBox[{
                    FractionBox["1", "720"], " ", "n", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    SuperscriptBox["n", "5"], "-", 
                    RowBox[{"9", " ", 
                    SuperscriptBox["n", "4"]}], "+", 
                    RowBox[{"25", " ", 
                    SuperscriptBox["n", "3"]}], "-", 
                    RowBox[{"15", " ", 
                    SuperscriptBox["n", "2"]}], "-", 
                    RowBox[{"26", " ", "n"}], "+", "24"}], ")"}], " ", 
                    SuperscriptBox["z", "5"]}], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox["z", "6"], ")"}], 
                    SeriesData[$CellContext`z, 0, {}, 0, 6, 1], Editable -> 
                    False]}], 
                    RowBox[{"SeriesData", "[", 
                    RowBox[{"z", ",", "0", ",", 
                    RowBox[{"{", 
                    RowBox[{"n", ",", 
                    RowBox[{
                    FractionBox["1", "2"], " ", "n", " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", "n"}], ")"}]}], ",", 
                    RowBox[{
                    FractionBox["1", "6"], " ", "n", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "1"}], "+", 
                    SuperscriptBox["n", "2"]}], ")"}]}], ",", 
                    RowBox[{
                    FractionBox["1", "24"], " ", "n", " ", 
                    RowBox[{"(", 
                    RowBox[{"2", "-", "n", "-", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["n", "2"]}], "+", 
                    SuperscriptBox["n", "3"]}], ")"}]}], ",", 
                    RowBox[{
                    FractionBox["1", "120"], " ", "n", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "6"}], "+", 
                    RowBox[{"5", " ", "n"}], "+", 
                    RowBox[{"5", " ", 
                    SuperscriptBox["n", "2"]}], "-", 
                    RowBox[{"5", " ", 
                    SuperscriptBox["n", "3"]}], "+", 
                    SuperscriptBox["n", "4"]}], ")"}]}], ",", 
                    RowBox[{
                    FractionBox["1", "720"], " ", "n", " ", 
                    RowBox[{"(", 
                    RowBox[{"24", "-", 
                    RowBox[{"26", " ", "n"}], "-", 
                    RowBox[{"15", " ", 
                    SuperscriptBox["n", "2"]}], "+", 
                    RowBox[{"25", " ", 
                    SuperscriptBox["n", "3"]}], "-", 
                    RowBox[{"9", " ", 
                    SuperscriptBox["n", "4"]}], "+", 
                    SuperscriptBox["n", "5"]}], ")"}]}]}], "}"}], ",", "0", 
                    ",", "6", ",", "1"}], "]"}]}, "SeriesData", 
                    DisplayFunction -> (#& ), 
                    InterpretationFunction -> (#2& ), SyntaxForm -> Plus]}, {
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"Taylor series\"", "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Verdana", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                PaneBox[
                 TagBox[
                  StyleBox[
                   
                   RowBox[{
                    "\"(\"", "\[NoBreak]", "\"converges everywhere\"", 
                    "\[NoBreak]", "\")\""}], {
                   FontFamily -> "Verdana", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 BaseStyle -> {LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More terms", "input" -> 
         "SeriesExpansionAtZ = 0__More terms"}, {}]}]}], Typeset`pod3$$ = 
   XMLElement[
   "pod", {"title" -> "Series representations", "scanner" -> "Series", "id" -> 
     "SeriesRepresentations", "position" -> "300", "error" -> "false", 
     "numsubpods" -> "3"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "((1 + z) (-1 + (1 + z)^n))/z == 1 + z + Sum[(((1 + z)^2 Log[1 + z]^\
\[Nu])/(z \[Nu]!)) (-1 + n)^\[Nu], {\[Nu], 1, Infinity}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TagBox[
              RowBox[{
                FractionBox[
                 RowBox[{
                   RowBox[{"(", 
                    RowBox[{"1", "+", "z"}], ")"}], " ", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "1"}], "+", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "+", "z"}], ")"}], "n"]}], ")"}]}], "z"], 
                "\[LongEqual]", 
                RowBox[{"1", "+", "z", "+", 
                  RowBox[{
                    UnderoverscriptBox["\[Sum]", 
                    RowBox[{"\[Nu]", "=", "1"}], "\[Infinity]"], 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "1"}], "+", "n"}], ")"}], "\[Nu]"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "+", "z"}], ")"}], "2"], " ", 
                    RowBox[{
                    SuperscriptBox["log", "\[Nu]"], "(", 
                    RowBox[{"1", "+", "z"}], ")"}]}], ")"}]}], 
                    RowBox[{"z", " ", 
                    RowBox[{"\[Nu]", "!"}]}]]}]}]}], HoldForm], FrameStyle -> 
             None, FrameMargins -> {{-1, -1}, {3, 3}}], TraditionalForm]], 
          "Output", {}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "((1 + z) (-1 + (1 + z)^n))/z == Sum[Piecewise[{{0, \[Nu] == -1}, {n, \
\[Nu] == 0}, {Binomial[n, \[Nu]] + Binomial[n, 1 + \[Nu]], \[Nu] > 0}}, 0] z^\
\[Nu], {\[Nu], -Infinity, Infinity}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TagBox[
              RowBox[{
                FractionBox[
                 RowBox[{
                   RowBox[{"(", 
                    RowBox[{"1", "+", "z"}], ")"}], " ", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "1"}], "+", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "+", "z"}], ")"}], "n"]}], ")"}]}], "z"], 
                "\[LongEqual]", 
                RowBox[{
                  UnderoverscriptBox["\[Sum]", 
                   RowBox[{"\[Nu]", "=", 
                    RowBox[{
                    RowBox[{"-", "1"}], "\[Infinity]"}]}], "\[Infinity]"], 
                  RowBox[{
                    RowBox[{"(", 
                    TagBox[
                    GridBox[{{"\[Piecewise]", 
                    GridBox[{{
                    TagBox["0", HoldForm], 
                    StyleBox[
                    RowBox[{"\[Nu]", "\[LongEqual]", 
                    RowBox[{"-", "1"}]}], {
                    FontFamily -> "Helvetica", FontSize -> Smaller, 
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TagBox["n", HoldForm], 
                    StyleBox[
                    RowBox[{"\[Nu]", "\[LongEqual]", "0"}], {
                    FontFamily -> "Helvetica", FontSize -> Smaller, 
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TagBox[
                    RowBox[{
                    TemplateBox[{"n", "\[Nu]"}, "Binomial"], "+", 
                    TemplateBox[{"n", 
                    RowBox[{"1", "+", "\[Nu]"}]}, "Binomial"]}], HoldForm], 
                    StyleBox[
                    RowBox[{"\[Nu]", ">", "0"}], {
                    FontFamily -> "Helvetica", FontSize -> Smaller, 
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}}, ColumnAlignments -> {Left}, 
                    ColumnSpacings -> 1.2, ColumnWidths -> Automatic, 
                    AllowedDimensions -> {2, Automatic}, Selectable -> True, 
                    Editable -> True]}}, AllowScriptLevelChange -> False, 
                    ColumnAlignments -> {Left}, ColumnSpacings -> 0.5, 
                    ColumnWidths -> Automatic], "Piecewise", SyntaxForm -> 
                    Span, SelectWithContents -> True, Selectable -> False, 
                    Editable -> False, DeleteWithContents -> True], ")"}], 
                    " ", 
                    SuperscriptBox["z", "\[Nu]"]}]}]}], HoldForm], FrameStyle -> 
             None, FrameMargins -> {{-1, -1}, {3, 3}}], TraditionalForm]], 
          "Output", {}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "((1 + z) (-1 + (1 + z)^n))/z == Sum[Piecewise[{{((1 + z) Log[1 + z]^\
\[Nu])/(z \[Nu]!), \[Nu] > 0}}, 0] n^\[Nu], {\[Nu], -Infinity, Infinity}]"}], 
       
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TagBox[
              RowBox[{
                FractionBox[
                 RowBox[{
                   RowBox[{"(", 
                    RowBox[{"1", "+", "z"}], ")"}], " ", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "1"}], "+", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "+", "z"}], ")"}], "n"]}], ")"}]}], "z"], 
                "\[LongEqual]", 
                RowBox[{
                  UnderoverscriptBox["\[Sum]", 
                   RowBox[{"\[Nu]", "=", 
                    RowBox[{
                    RowBox[{"-", "1"}], "\[Infinity]"}]}], "\[Infinity]"], 
                  RowBox[{
                    RowBox[{"(", 
                    TagBox[
                    GridBox[{{"\[Piecewise]", 
                    GridBox[{{
                    TagBox[
                    FractionBox[
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", "+", "z"}], ")"}], " ", 
                    RowBox[{
                    SuperscriptBox["log", "\[Nu]"], "(", 
                    RowBox[{"1", "+", "z"}], ")"}]}], 
                    RowBox[{"z", " ", 
                    RowBox[{"\[Nu]", "!"}]}]], HoldForm], 
                    StyleBox[
                    RowBox[{"\[Nu]", ">", "0"}], {
                    FontFamily -> "Helvetica", FontSize -> Smaller, 
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TagBox["0", HoldForm], 
                    StyleBox[
                    "\"otherwise\"", {
                    FontFamily -> "Helvetica", FontSize -> Smaller, 
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}}, ColumnAlignments -> {Left}, 
                    ColumnSpacings -> 1.2, ColumnWidths -> Automatic, 
                    AllowedDimensions -> {2, Automatic}, Selectable -> True, 
                    Editable -> True]}}, AllowScriptLevelChange -> False, 
                    ColumnAlignments -> {Left}, ColumnSpacings -> 0.5, 
                    ColumnWidths -> Automatic], "Piecewise", SyntaxForm -> 
                    Span, SelectWithContents -> True, Selectable -> False, 
                    Editable -> False, DeleteWithContents -> True], ")"}], 
                    " ", 
                    SuperscriptBox["n", "\[Nu]"]}]}]}], HoldForm], FrameStyle -> 
             None, FrameMargins -> {{-1, -1}, {3, 3}}], TraditionalForm]], 
          "Output", {}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["infos", {"count" -> "3"}, {
       XMLElement["info", {"text" -> "n! is the factorial function"}, {
         XMLElement[
         "link", {
          "url" -> 
           "http://reference.wolfram.com/mathematica/ref/Factorial.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/GammaBetaErf/Factorial", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Factorial.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox[
              TemplateBox[{
                RowBox[{"n", "!"}], "\" \"", "\"is the factorial function\""},
                "RowDefault"], TraditionalForm]], "Output", {}]}]}], 
       XMLElement["info", {"text" -> "log(x) is the natural logarithm"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/mathematica/ref/Log.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ElementaryFunctions/Log", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/NaturalLogarithm.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox[
              TemplateBox[{
                RowBox[{"log", "(", "x", ")"}], "\" \"", 
                "\"is the natural logarithm\""}, "RowDefault"], 
              TraditionalForm]], "Output", {}]}]}], 
       XMLElement["info", {"text" -> "(n m) is the binomial coefficient"}, {
         XMLElement[
         "link", {
          "url" -> 
           "http://reference.wolfram.com/mathematica/ref/Binomial.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/GammaBetaErf/Binomial", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/BinomialCoefficient.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox[
              TemplateBox[{
                TemplateBox[{"n", "m"}, "Binomial"], "\" \"", 
                "\"is the binomial coefficient\""}, "RowDefault"], 
              TraditionalForm]], "Output", {}]}]}]}]}], Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {True, False, {False}, True},
    Typeset`aux3$$ = {True, False, {False, False, False}, True}, 
   Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "3", "datatypes" -> 
    "MathematicalFunctionIdentity,Series", "timedout" -> "", "timedoutpods" -> 
    "", "timing" -> "3.053", "parsetiming" -> "1.498", "parsetimedout" -> 
    "false", "recalculate" -> "", "id" -> 
    "MSPa56220c675fgbgh37a74000021ei4a1324ace05b", "host" -> 
    "http://www3.wolframalpha.com", "server" -> "2", "related" -> 
    "http://www3.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa56320c675fgbgh37a7400002879424118a7cge6&s=2", "version" -> "2.6", 
    "profile" -> "EnterDoQuery:0.,StartWrap:3.05262"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> -5., 
    "Date" -> {2016, 2, 21, 1, 25, 51.912422`8.467846266827248}, "Line" -> 16,
     "SessionID" -> 24653742985256794637}, Typeset`showpods$$ = {1, 2, 3}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = False, 
   Typeset`newq$$ = 
   "taylor approximation ((1 + z) (-1 + (1 + z)^n))/z for around 0"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$}, Typeset`chosen$$, 
        Typeset`open$$, Typeset`elements$$, Typeset`q$$, Typeset`opts$$, 
        Typeset`nonpods$$, Typeset`queryinfo$$, Typeset`sessioninfo$$, 
        Typeset`showpods$$, Typeset`failedpods$$, Typeset`newq$$}]], 
     StandardForm],
    ImageSizeCache->{644., {303., 309.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; 
     WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}], 
       Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print",
 CellMargins->{{20, 10}, {Inherited, Inherited}},
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellChangeTimes->{{3.6650247519321947`*^9, 3.665024776758988*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryParseResults",
  DynamicModuleBox[{Typeset`q$$ = "series (1+Y+x)^T around x=0", 
   Typeset`newq$$ = "series (1+Y+x)^T around x=0", Typeset`chosen$$ = 
   "Series[(1 + x + Y)^T, {x, 0, 5}]", Typeset`open$$ = False}, 
   PaneSelectorBox[{False->
    DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
     WolframAlphaClient`Private`assumptionsQ$$ = False}, 
     TagBox[
      FrameBox[
       TagBox[GridBox[{
          {
           InputFieldBox[Dynamic[Typeset`newq$$], String,
            Appearance->None,
            BaseStyle->{"CalculateInput"},
            ContinuousAction->True,
            Enabled->True,
            FieldSize->{{1, 40}, {1, 
               DirectedInfinity[1]}},
            TrapSelection->False], 
           ItemBox[
            ButtonBox[
             PaneSelectorBox[{True->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "OrangeSquarePlus"],
                 ImageSizeCache->{10., {3., 8.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ], False->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "GraySquarePlus"],
                 ImageSizeCache->{10., {3., 8.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ]}, Dynamic[WolframAlphaClient`Private`show$$],
              ImageSize->All],
             Appearance->None,
             ButtonFunction:>(Quiet[
                WolframAlpha[]]; If[
                Or[
                 CurrentValue["OptionKey"], 
                 CurrentValue["AltKey"]], SelectionMove[
                  ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                  Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                   "TextForm"], All], Typeset`open$$ = True; 
                WolframAlphaClient`Private`extrudeFromFastParse[
                 "series (1+Y+x)^T around x=0", 
                  Defer[
                   
                   Series[(1 + Global`x + Global`Y)^Global`T, {
                    Global`x, 0, 5}]], "Fast parse"]; Typeset`open$$ = False]),
             Evaluator->Automatic,
             Method->"Queued"],
            Alignment->{Right, Top},
            StripOnInput->False]},
          {
           PaneBox[
            TagBox[
             TooltipBox[
              ButtonBox[
               PaneSelectorBox[{False->
                StyleBox[
                 RowBox[{"Series", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", " ", "+", " ", "x", " ", "+", " ", "Y"}], 
                    ")"}], "^", "T"}], ",", " ", 
                   RowBox[{"{", 
                    RowBox[{"x", ",", " ", "0", ",", " ", "5"}], "}"}]}], 
                  "]"}],
                 StripOnInput->False,
                 NumberMarks->False], True->
                StyleBox[
                 RowBox[{"Series", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", " ", "+", " ", "x", " ", "+", " ", "Y"}], 
                    ")"}], "^", "T"}], ",", " ", 
                   RowBox[{"{", 
                    RowBox[{"x", ",", " ", "0", ",", " ", "5"}], "}"}]}], 
                  "]"}],
                 StripOnInput->False,
                 ShowSyntaxStyles->False,
                 NumberMarks->False,
                 FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                 CurrentValue["MouseOver"]],
                BaseStyle->{ShowStringCharacters -> True},
                FrameMargins->0,
                ImageSize->Automatic],
               Alignment->Left,
               Appearance->None,
               BaseStyle->{},
               ButtonFunction:>(SelectionMove[
                  ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                   BoxData[
                    RowBox[{"Series", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", " ", "+", " ", "x", " ", "+", " ", "Y"}], 
                    ")"}], "^", "T"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", " ", "0", ",", " ", "5"}], "}"}]}], 
                    "]"}]], "Input"], All]; SelectionMove[
                  ButtonNotebook[], After, CellContents]),
               Evaluator->Automatic,
               ImageSize->Automatic,
               Method->"Preemptive"],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
              "Tooltip"]& ],
            AppearanceElements->{},
            BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
            ImageSize->{Automatic, {1, 100}},
            Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         FrameStyle->GrayLevel[0.85],
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxDividers->{
          "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"],
       Alignment->Top,
       Background->Dynamic[
         FEPrivate`If[
          FEPrivate`And[
           FEPrivate`SameQ[
            FEPrivate`Head[Typeset`newq$$], String], 
           FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
          RGBColor[1., 0.975, 0.95], 
          GrayLevel[1]]],
       BaselinePosition->Baseline,
       FrameStyle->GrayLevel[0.85],
       ImageSize->Automatic,
       RoundingRadius->5,
       StripOnInput->False],
      EventHandlerTag[{
       "MouseEntered" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, True], "MouseExited" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, False], 
        PassEventsDown -> Automatic, PassEventsUp -> True}]],
     DynamicModuleValues:>{}], True->
    TagBox[GridBox[{
       {
        DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
         WolframAlphaClient`Private`assumptionsQ$$ = False}, 
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               InputFieldBox[Dynamic[Typeset`newq$$], String,
                Appearance->None,
                BaseStyle->{"CalculateInput"},
                ContinuousAction->True,
                Enabled->True,
                FieldSize->{{1, 40}, {1, 
                   DirectedInfinity[1]}},
                TrapSelection->False], 
               ItemBox[
                ButtonBox[
                 PaneSelectorBox[{True->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "OrangeSquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ], False->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "GraySquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ]}, Dynamic[
                  WolframAlphaClient`Private`show$$],
                  ImageSize->All],
                 Appearance->None,
                 ButtonFunction:>(Quiet[
                    WolframAlpha[]]; If[
                    Or[
                    CurrentValue["OptionKey"], 
                    CurrentValue["AltKey"]], SelectionMove[
                    ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                    NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                    "TextForm"], All], Typeset`open$$ = True; 
                    WolframAlphaClient`Private`extrudeFromFastParse[
                    "series (1+Y+x)^T around x=0", 
                    Defer[
                    
                    Series[(1 + Global`x + Global`Y)^Global`T, {
                    Global`x, 0, 5}]], "Fast parse"]; Typeset`open$$ = False]),
                 Evaluator->Automatic,
                 Method->"Queued"],
                Alignment->{Right, Top},
                StripOnInput->False]},
              {
               PaneBox[
                TagBox[
                 TooltipBox[
                  ButtonBox[
                   PaneSelectorBox[{False->
                    StyleBox[
                    RowBox[{"Series", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", " ", "+", " ", "x", " ", "+", " ", "Y"}], 
                    ")"}], "^", "T"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", " ", "0", ",", " ", "5"}], "}"}]}], 
                    "]"}],
                    StripOnInput->False,
                    NumberMarks->False], True->
                    StyleBox[
                    RowBox[{"Series", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", " ", "+", " ", "x", " ", "+", " ", "Y"}], 
                    ")"}], "^", "T"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", " ", "0", ",", " ", "5"}], "}"}]}], 
                    "]"}],
                    StripOnInput->False,
                    ShowSyntaxStyles->False,
                    NumberMarks->False,
                    FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{ShowStringCharacters -> True},
                    FrameMargins->0,
                    ImageSize->Automatic],
                   Alignment->Left,
                   Appearance->None,
                   BaseStyle->{},
                   ButtonFunction:>(SelectionMove[
                    ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    BoxData[
                    RowBox[{"Series", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", " ", "+", " ", "x", " ", "+", " ", "Y"}], 
                    ")"}], "^", "T"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", " ", "0", ",", " ", "5"}], "}"}]}], 
                    "]"}]], "Input"], All]; SelectionMove[
                    ButtonNotebook[], After, CellContents]),
                   Evaluator->Automatic,
                   ImageSize->Automatic,
                   Method->"Preemptive"],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                    StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
                  "Tooltip"]& ],
                AppearanceElements->{},
                BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
                ImageSize->{Automatic, {1, 100}},
                Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             BaselinePosition->{1, 1},
             FrameStyle->GrayLevel[0.85],
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxDividers->{
              "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           Alignment->Top,
           Background->Dynamic[
             FEPrivate`If[
              FEPrivate`And[
               FEPrivate`SameQ[
                FEPrivate`Head[Typeset`newq$$], String], 
               FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
              RGBColor[1., 0.975, 0.95], 
              GrayLevel[1]]],
           BaselinePosition->Baseline,
           FrameStyle->GrayLevel[0.85],
           ImageSize->Automatic,
           RoundingRadius->5,
           StripOnInput->False],
          
          EventHandlerTag[{
           "MouseEntered" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, True], 
            "MouseExited" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, False], 
            PassEventsDown -> Automatic, PassEventsUp -> True}]],
         DynamicModuleValues:>{}]},
       {
        InterpretationBox[
         StyleBox[
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEExpressions", "NecklaceAnimator"][20]],
          AnimatorBoxOptions->{ImageSize->20}],
         Animator[Appearance -> "Necklace", ImageSize -> 20],
         BaseStyle->{"Deploy"}]}
      },
      BaselinePosition->{1, 1},
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     
     "Column"]}, Dynamic[
     TrueQ[Typeset`open$$]],
    BaseStyle->{Deployed -> True},
    ImageSize->Automatic],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"1", "+", "Y"}], ")"}], "T"], "+", 
   RowBox[{"T", " ", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"1", "+", "Y"}], ")"}], 
     RowBox[{
      RowBox[{"-", "1"}], "+", "T"}]], " ", "x"}], "+", 
   RowBox[{
    FractionBox["1", "2"], " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", "1"}], "+", "T"}], ")"}], " ", "T", " ", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"1", "+", "Y"}], ")"}], 
     RowBox[{
      RowBox[{"-", "2"}], "+", "T"}]], " ", 
    SuperscriptBox["x", "2"]}], "+", 
   RowBox[{
    FractionBox["1", "6"], " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", "2"}], "+", "T"}], ")"}], " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", "1"}], "+", "T"}], ")"}], " ", "T", " ", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"1", "+", "Y"}], ")"}], 
     RowBox[{
      RowBox[{"-", "3"}], "+", "T"}]], " ", 
    SuperscriptBox["x", "3"]}], "+", 
   RowBox[{
    FractionBox["1", "24"], " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", "3"}], "+", "T"}], ")"}], " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", "2"}], "+", "T"}], ")"}], " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", "1"}], "+", "T"}], ")"}], " ", "T", " ", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"1", "+", "Y"}], ")"}], 
     RowBox[{
      RowBox[{"-", "4"}], "+", "T"}]], " ", 
    SuperscriptBox["x", "4"]}], "+", 
   RowBox[{
    FractionBox["1", "120"], " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", "4"}], "+", "T"}], ")"}], " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", "3"}], "+", "T"}], ")"}], " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", "2"}], "+", "T"}], ")"}], " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", "1"}], "+", "T"}], ")"}], " ", "T", " ", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"1", "+", "Y"}], ")"}], 
     RowBox[{
      RowBox[{"-", "5"}], "+", "T"}]], " ", 
    SuperscriptBox["x", "5"]}], "+", 
   InterpretationBox[
    SuperscriptBox[
     RowBox[{"O", "[", "x", "]"}], "6"],
    SeriesData[$CellContext`x, 0, {}, 0, 6, 1],
    Editable->False]}],
  SeriesData[$CellContext`x, 
   0, {(1 + $CellContext`Y)^$CellContext`T, $CellContext`T (
      1 + $CellContext`Y)^(-1 + $CellContext`T), 
    Rational[1, 2] (-1 + $CellContext`T) $CellContext`T (
      1 + $CellContext`Y)^(-2 + $CellContext`T), 
    Rational[1, 
      6] (-2 + $CellContext`T) (-1 + $CellContext`T) $CellContext`T (
      1 + $CellContext`Y)^(-3 + $CellContext`T), 
    Rational[1, 
      24] (-3 + $CellContext`T) (-2 + $CellContext`T) (-1 + $CellContext`T) \
$CellContext`T (1 + $CellContext`Y)^(-4 + $CellContext`T), 
    Rational[1, 
      120] (-4 + $CellContext`T) (-3 + $CellContext`T) (-2 + $CellContext`T) \
(-1 + $CellContext`T) $CellContext`T (
      1 + $CellContext`Y)^(-5 + $CellContext`T)}, 0, 6, 1],
  Editable->False]], "Output",
 CellChangeTimes->{3.665444839646628*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "series ",
 Cell[BoxData[
  FormBox[
   RowBox[{"-", 
    FractionBox[
     RowBox[{
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"z", "+", "1"}], ")"}], 
       RowBox[{"-", "n"}]], "-", "1"}], "z"]}], TraditionalForm]],
  CellMargins->{{20, 10}, {Inherited, Inherited}},
  CellChangeTimes->{3.6650268188960247`*^9}],
 " for around z=0"
}], "WolframAlphaLong",
 CellChangeTimes->{{3.665026860882987*^9, 3.6650268770452642`*^9}}],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "series -(((z + 1)^-n - 1)/z) for around z=0", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {30, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "http://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
    
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Series[-((-1 + (1 + z)^(-n))/z), {z, 0, 5}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"series\"", {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    StyleBox[
                    RowBox[{"-", 
                    TagBox[
                    FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"z", "+", "1"}], ")"}], 
                    RowBox[{"-", "n"}]], "-", "1"}], "z"], 
                    PolynomialForm[#, TraditionalOrder -> False]& ]}], 
                    ScriptLevel -> 0, StripOnInput -> False], 
                    StyleBox["\"point\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False], 
                    RowBox[{"z", "\[LongEqual]", "0"}]}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None, None, None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    $CellContext`TagBoxWrapper["Separator" -> " | "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnsEqual -> False, RowsEqual -> False, 
               GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
               AllowScriptLevelChange -> False], 
              $CellContext`TagBoxWrapper["Separator" -> " | "]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {}]}], 
       XMLElement["dataformats", {}, {"plaintext,minput"}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Series expansion at z=0", "scanner" -> "Series", "id" -> 
     "SeriesExpansionAtZ = 0", "position" -> "200", "error" -> "false", 
     "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Series[(1 - (1 + z)^(-n))/z, {z, 0, 6}]"}], 
       
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{
                  RowBox[{"n", "-", 
                    RowBox[{
                    FractionBox["1", "2"], " ", 
                    RowBox[{"(", 
                    RowBox[{"n", " ", 
                    RowBox[{"(", 
                    RowBox[{"n", "+", "1"}], ")"}]}], ")"}], " ", "z"}], "+", 
                    
                    RowBox[{
                    FractionBox["1", "6"], " ", "n", " ", 
                    RowBox[{"(", 
                    RowBox[{"n", "+", "1"}], ")"}], " ", 
                    RowBox[{"(", 
                    RowBox[{"n", "+", "2"}], ")"}], " ", 
                    SuperscriptBox["z", "2"]}], "-", 
                    RowBox[{
                    FractionBox["1", "24"], " ", 
                    RowBox[{"(", 
                    RowBox[{"n", " ", 
                    RowBox[{"(", 
                    RowBox[{"n", "+", "1"}], ")"}], " ", 
                    RowBox[{"(", 
                    RowBox[{"n", "+", "2"}], ")"}], " ", 
                    RowBox[{"(", 
                    RowBox[{"n", "+", "3"}], ")"}]}], ")"}], " ", 
                    SuperscriptBox["z", "3"]}], "+", 
                    RowBox[{
                    FractionBox["1", "120"], " ", "n", " ", 
                    RowBox[{"(", 
                    RowBox[{"n", "+", "1"}], ")"}], " ", 
                    RowBox[{"(", 
                    RowBox[{"n", "+", "2"}], ")"}], " ", 
                    RowBox[{"(", 
                    RowBox[{"n", "+", "3"}], ")"}], " ", 
                    RowBox[{"(", 
                    RowBox[{"n", "+", "4"}], ")"}], " ", 
                    SuperscriptBox["z", "4"]}], "-", 
                    RowBox[{
                    FractionBox["1", "720"], " ", 
                    RowBox[{"(", 
                    RowBox[{"n", " ", 
                    RowBox[{"(", 
                    RowBox[{"n", "+", "1"}], ")"}], " ", 
                    RowBox[{"(", 
                    RowBox[{"n", "+", "2"}], ")"}], " ", 
                    RowBox[{"(", 
                    RowBox[{"n", "+", "3"}], ")"}], " ", 
                    RowBox[{"(", 
                    RowBox[{"n", "+", "4"}], ")"}], " ", 
                    RowBox[{"(", 
                    RowBox[{"n", "+", "5"}], ")"}]}], ")"}], " ", 
                    SuperscriptBox["z", "5"]}], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox["z", "6"], ")"}], 
                    SeriesData[$CellContext`z, 0, {}, 0, 6, 1], Editable -> 
                    False]}], 
                  RowBox[{"SeriesData", "[", 
                    RowBox[{"z", ",", "0", ",", 
                    RowBox[{"{", 
                    RowBox[{"n", ",", 
                    RowBox[{
                    RowBox[{"-", 
                    FractionBox["1", "2"]}], " ", "n", " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", "n"}], ")"}]}], ",", 
                    RowBox[{
                    FractionBox["1", "6"], " ", "n", " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", "n"}], ")"}], " ", 
                    RowBox[{"(", 
                    RowBox[{"2", "+", "n"}], ")"}]}], ",", 
                    RowBox[{
                    RowBox[{"-", 
                    FractionBox["1", "24"]}], " ", "n", " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", "n"}], ")"}], " ", 
                    RowBox[{"(", 
                    RowBox[{"2", "+", "n"}], ")"}], " ", 
                    RowBox[{"(", 
                    RowBox[{"3", "+", "n"}], ")"}]}], ",", 
                    RowBox[{
                    FractionBox["1", "120"], " ", "n", " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", "n"}], ")"}], " ", 
                    RowBox[{"(", 
                    RowBox[{"2", "+", "n"}], ")"}], " ", 
                    RowBox[{"(", 
                    RowBox[{"3", "+", "n"}], ")"}], " ", 
                    RowBox[{"(", 
                    RowBox[{"4", "+", "n"}], ")"}]}], ",", 
                    RowBox[{
                    RowBox[{"-", 
                    FractionBox["1", "720"]}], " ", "n", " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", "n"}], ")"}], " ", 
                    RowBox[{"(", 
                    RowBox[{"2", "+", "n"}], ")"}], " ", 
                    RowBox[{"(", 
                    RowBox[{"3", "+", "n"}], ")"}], " ", 
                    RowBox[{"(", 
                    RowBox[{"4", "+", "n"}], ")"}], " ", 
                    RowBox[{"(", 
                    RowBox[{"5", "+", "n"}], ")"}]}]}], "}"}], ",", "0", ",", 
                    "6", ",", "1"}], "]"}]}, "SeriesData", 
                 DisplayFunction -> (#& ), InterpretationFunction -> (#2& ), 
                 SyntaxForm -> Plus]}, {
                StyleBox[
                 
                 RowBox[{
                  "\"(\"", "\[NoBreak]", "\"Taylor series\"", "\[NoBreak]", 
                   "\")\""}], {FontFamily -> "Verdana", FontSize -> 10, 
                  GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}, StripOnInput -> False]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More terms", "input" -> 
         "SeriesExpansionAtZ = 0__More terms"}, {}]}]}], Typeset`pod3$$ = 
   XMLElement[
   "pod", {"title" -> "Series representations", "scanner" -> "Series", "id" -> 
     "SeriesRepresentations", "position" -> "300", "error" -> "false", 
     "numsubpods" -> "3"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "(1 - (1 + z)^(-n))/z == Sum[Piecewise[{{0, \[Nu] == -1}, \
{-Binomial[-n, 1 + \[Nu]], \[Nu] > -1}}, 0] z^\[Nu], {\[Nu], -Infinity, \
Infinity}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TagBox[
              RowBox[{
                FractionBox[
                 RowBox[{"1", "-", 
                   SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "+", "z"}], ")"}], 
                    RowBox[{"-", "n"}]]}], "z"], "\[LongEqual]", 
                RowBox[{
                  UnderoverscriptBox["\[Sum]", 
                   RowBox[{"\[Nu]", "=", 
                    RowBox[{
                    RowBox[{"-", "1"}], "\[Infinity]"}]}], "\[Infinity]"], 
                  RowBox[{
                    RowBox[{"(", 
                    TagBox[
                    GridBox[{{"\[Piecewise]", 
                    GridBox[{{
                    TagBox["0", HoldForm], 
                    StyleBox[
                    RowBox[{"\[Nu]", "\[LongEqual]", 
                    RowBox[{"-", "1"}]}], {
                    FontFamily -> "Helvetica", FontSize -> Smaller, 
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TagBox[
                    RowBox[{"-", 
                    TemplateBox[{
                    RowBox[{"-", "n"}], 
                    RowBox[{"1", "+", "\[Nu]"}]}, "Binomial"]}], HoldForm], 
                    StyleBox[
                    RowBox[{"\[Nu]", ">", 
                    RowBox[{"-", "1"}]}], {
                    FontFamily -> "Helvetica", FontSize -> Smaller, 
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}}, ColumnAlignments -> {Left}, 
                    ColumnSpacings -> 1.2, ColumnWidths -> Automatic, 
                    AllowedDimensions -> {2, Automatic}, Selectable -> True, 
                    Editable -> True]}}, AllowScriptLevelChange -> False, 
                    ColumnAlignments -> {Left}, ColumnSpacings -> 0.5, 
                    ColumnWidths -> Automatic], "Piecewise", SyntaxForm -> 
                    Span, SelectWithContents -> True, Selectable -> False, 
                    Editable -> False, DeleteWithContents -> True], ")"}], 
                    " ", 
                    SuperscriptBox["z", "\[Nu]"]}]}]}], HoldForm], FrameStyle -> 
             None, FrameMargins -> {{-1, -1}, {3, 3}}], TraditionalForm]], 
          "Output", {}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "(1 - (1 + z)^(-n))/z == Sum[Piecewise[{{0, \[Nu] == 0}, {-((-Log[1 + \
z])^\[Nu]/(z \[Nu]!)), \[Nu] > 0}}, 0] n^\[Nu], {\[Nu], -Infinity, \
Infinity}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TagBox[
              RowBox[{
                FractionBox[
                 RowBox[{"1", "-", 
                   SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "+", "z"}], ")"}], 
                    RowBox[{"-", "n"}]]}], "z"], "\[LongEqual]", 
                RowBox[{
                  UnderoverscriptBox["\[Sum]", 
                   RowBox[{"\[Nu]", "=", 
                    RowBox[{
                    RowBox[{"-", "1"}], "\[Infinity]"}]}], "\[Infinity]"], 
                  RowBox[{
                    RowBox[{"(", 
                    TagBox[
                    GridBox[{{"\[Piecewise]", 
                    GridBox[{{
                    TagBox["0", HoldForm], 
                    StyleBox[
                    RowBox[{"\[Nu]", "\[LongEqual]", "0"}], {
                    FontFamily -> "Helvetica", FontSize -> Smaller, 
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TagBox[
                    RowBox[{"-", 
                    FractionBox[
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", 
                    RowBox[{"log", "(", 
                    RowBox[{"1", "+", "z"}], ")"}]}], ")"}], "\[Nu]"], 
                    RowBox[{"z", " ", 
                    RowBox[{"\[Nu]", "!"}]}]]}], HoldForm], 
                    StyleBox[
                    RowBox[{"\[Nu]", ">", "0"}], {
                    FontFamily -> "Helvetica", FontSize -> Smaller, 
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}}, ColumnAlignments -> {Left}, 
                    ColumnSpacings -> 1.2, ColumnWidths -> Automatic, 
                    AllowedDimensions -> {2, Automatic}, Selectable -> True, 
                    Editable -> True]}}, AllowScriptLevelChange -> False, 
                    ColumnAlignments -> {Left}, ColumnSpacings -> 0.5, 
                    ColumnWidths -> Automatic], "Piecewise", SyntaxForm -> 
                    Span, SelectWithContents -> True, Selectable -> False, 
                    Editable -> False, DeleteWithContents -> True], ")"}], 
                    " ", 
                    SuperscriptBox["n", "\[Nu]"]}]}]}], HoldForm], FrameStyle -> 
             None, FrameMargins -> {{-1, -1}, {3, 3}}], TraditionalForm]], 
          "Output", {}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "(1 - (1 + z)^(-n))/z == Sum[Piecewise[{{(1 + z)^(-1), \[Nu] == 0}, \
{-((-Log[1 + z])^\[Nu]/(z \[Nu]! + z^2 \[Nu]!)), \[Nu] > 0}}, 0] (-1 + n)^\
\[Nu], {\[Nu], -Infinity, Infinity}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TagBox[
              RowBox[{
                FractionBox[
                 RowBox[{"1", "-", 
                   SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "+", "z"}], ")"}], 
                    RowBox[{"-", "n"}]]}], "z"], "\[LongEqual]", 
                RowBox[{
                  UnderoverscriptBox["\[Sum]", 
                   RowBox[{"\[Nu]", "=", 
                    RowBox[{
                    RowBox[{"-", "1"}], "\[Infinity]"}]}], "\[Infinity]"], 
                  RowBox[{
                    RowBox[{"(", 
                    TagBox[
                    GridBox[{{"\[Piecewise]", 
                    GridBox[{{
                    TagBox[
                    FractionBox["1", 
                    RowBox[{"1", "+", "z"}]], HoldForm], 
                    StyleBox[
                    RowBox[{"\[Nu]", "\[LongEqual]", "0"}], {
                    FontFamily -> "Helvetica", FontSize -> Smaller, 
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TagBox[
                    RowBox[{"-", 
                    FractionBox[
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", 
                    RowBox[{"log", "(", 
                    RowBox[{"1", "+", "z"}], ")"}]}], ")"}], "\[Nu]"], 
                    RowBox[{
                    RowBox[{"z", " ", 
                    RowBox[{"\[Nu]", "!"}]}], "+", 
                    RowBox[{
                    SuperscriptBox["z", "2"], " ", 
                    RowBox[{"\[Nu]", "!"}]}]}]]}], HoldForm], 
                    StyleBox[
                    RowBox[{"\[Nu]", ">", "0"}], {
                    FontFamily -> "Helvetica", FontSize -> Smaller, 
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}}, ColumnAlignments -> {Left}, 
                    ColumnSpacings -> 1.2, ColumnWidths -> Automatic, 
                    AllowedDimensions -> {2, Automatic}, Selectable -> True, 
                    Editable -> True]}}, AllowScriptLevelChange -> False, 
                    ColumnAlignments -> {Left}, ColumnSpacings -> 0.5, 
                    ColumnWidths -> Automatic], "Piecewise", SyntaxForm -> 
                    Span, SelectWithContents -> True, Selectable -> False, 
                    Editable -> False, DeleteWithContents -> True], ")"}], 
                    " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "1"}], "+", "n"}], ")"}], "\[Nu]"]}]}]}], 
              HoldForm], FrameStyle -> None, 
             FrameMargins -> {{-1, -1}, {3, 3}}], TraditionalForm]], 
          "Output", {}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["infos", {"count" -> "3"}, {
       XMLElement["info", {"text" -> "(n m) is the binomial coefficient"}, {
         XMLElement[
         "link", {
          "url" -> 
           "http://reference.wolfram.com/mathematica/ref/Binomial.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/GammaBetaErf/Binomial", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/BinomialCoefficient.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox[
              TemplateBox[{
                TemplateBox[{"n", "m"}, "Binomial"], "\" \"", 
                "\"is the binomial coefficient\""}, "RowDefault"], 
              TraditionalForm]], "Output", {}]}]}], 
       XMLElement["info", {"text" -> "n! is the factorial function"}, {
         XMLElement[
         "link", {
          "url" -> 
           "http://reference.wolfram.com/mathematica/ref/Factorial.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/GammaBetaErf/Factorial", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Factorial.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox[
              TemplateBox[{
                RowBox[{"n", "!"}], "\" \"", "\"is the factorial function\""},
                "RowDefault"], TraditionalForm]], "Output", {}]}]}], 
       XMLElement["info", {"text" -> "log(x) is the natural logarithm"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/mathematica/ref/Log.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ElementaryFunctions/Log", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/NaturalLogarithm.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox[
              TemplateBox[{
                RowBox[{"log", "(", "x", ")"}], "\" \"", 
                "\"is the natural logarithm\""}, "RowDefault"], 
              TraditionalForm]], "Output", {}]}]}]}]}], Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {True, False, {False}, True},
    Typeset`aux3$$ = {True, False, {False, False, False}, True}, 
   Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "3", "datatypes" -> 
    "MathematicalFunctionIdentity,Series", "timedout" -> "", "timedoutpods" -> 
    "", "timing" -> "3.653", "parsetiming" -> "1.298", "parsetimedout" -> 
    "false", "recalculate" -> "", "id" -> 
    "MSPa021fgg6d3i6b5i25800003ddc9f0hgc76i7be", "host" -> 
    "http://www4f.wolframalpha.com", "server" -> "23", "related" -> 
    "http://www4f.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa121fgg6d3i6b5i25800001g1hd775e15b8id7&s=23", "version" -> "2.6", 
    "profile" -> "EnterDoQuery:0.,StartWrap:3.65332"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> -5., 
    "Date" -> {2016, 2, 21, 2, 1, 23.299515`8.119921863783214}, "Line" -> 23, 
    "SessionID" -> 24653742985256794637}, Typeset`showpods$$ = {1, 2, 3}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = False, 
   Typeset`newq$$ = "series -(((z + 1)^-n - 1)/z) for around z=0"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$}, Typeset`chosen$$, 
        Typeset`open$$, Typeset`elements$$, Typeset`q$$, Typeset`opts$$, 
        Typeset`nonpods$$, Typeset`queryinfo$$, Typeset`sessioninfo$$, 
        Typeset`showpods$$, Typeset`failedpods$$, Typeset`newq$$}]], 
     StandardForm],
    ImageSizeCache->{651., {289., 295.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; 
     WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}], 
       Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print",
 CellMargins->{{20, 10}, {Inherited, Inherited}},
 CellChangeTimes->{3.6650268834018087`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "series ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"-", 
     FractionBox[
      RowBox[{
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"z", "+", "1"}], ")"}], 
        RowBox[{"-", "n"}]], "-", "1"}], 
      RowBox[{"z", "*", "n"}]]}], "*", 
    RowBox[{"(", 
     RowBox[{"1", "+", "z"}], ")"}]}], TraditionalForm]],
  CellMargins->{{20, 10}, {Inherited, Inherited}},
  CellChangeTimes->{3.6650268188960247`*^9}],
 " for around z=0"
}], "WolframAlphaLong",
 CellChangeTimes->{{3.665027104889805*^9, 3.665027140760602*^9}}],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "series -(((z + 1)^-n - 1)/(z*n))*(1 + z) for around z=0", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {30, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "http://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
    
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Series[-(((1 + z) (-1 + (1 + z)^(-n)))/(n z)), {z, 0, 5}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"series\"", {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    StyleBox[
                    RowBox[{
                    RowBox[{"-", 
                    TagBox[
                    FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"z", "+", "1"}], ")"}], 
                    RowBox[{"-", "n"}]], "-", "1"}], 
                    RowBox[{"z", " ", "n"}]], 
                    PolynomialForm[#, TraditionalOrder -> False]& ]}], " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", "z"}], ")"}]}], ScriptLevel -> 0, 
                    StripOnInput -> False], 
                    StyleBox["\"point\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False], 
                    RowBox[{"z", "\[LongEqual]", "0"}]}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None, None, None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    $CellContext`TagBoxWrapper["Separator" -> " | "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnsEqual -> False, RowsEqual -> False, 
               GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
               AllowScriptLevelChange -> False], 
              $CellContext`TagBoxWrapper["Separator" -> " | "]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {}]}], 
       XMLElement["dataformats", {}, {"plaintext,minput"}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Series expansion at z=0", "scanner" -> "Series", "id" -> 
     "SeriesExpansionAtZ = 0", "position" -> "200", "error" -> "false", 
     "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Series[(1 + z - (1 + z)^(1 - n))/(n z), {z, 0, 6}]"}], 
       
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{
                  RowBox[{"1", "+", 
                    RowBox[{
                    FractionBox["1", "2"], " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "-", "n"}], ")"}], " ", "z"}], "+", 
                    RowBox[{
                    FractionBox["1", "6"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    SuperscriptBox["n", "2"], "-", "1"}], ")"}], " ", 
                    SuperscriptBox["z", "2"]}], "+", 
                    RowBox[{
                    FractionBox["1", "24"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{
                    SuperscriptBox["n", "3"]}]}], "-", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["n", "2"]}], "+", "n", "+", "2"}], ")"}], 
                    " ", 
                    SuperscriptBox["z", "3"]}], "+", 
                    RowBox[{
                    FractionBox["1", "120"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    SuperscriptBox["n", "4"], "+", 
                    RowBox[{"5", " ", 
                    SuperscriptBox["n", "3"]}], "+", 
                    RowBox[{"5", " ", 
                    SuperscriptBox["n", "2"]}], "-", 
                    RowBox[{"5", " ", "n"}], "-", "6"}], ")"}], " ", 
                    SuperscriptBox["z", "4"]}], "+", 
                    RowBox[{
                    FractionBox["1", "720"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{
                    SuperscriptBox["n", "5"]}]}], "-", 
                    RowBox[{"9", " ", 
                    SuperscriptBox["n", "4"]}], "-", 
                    RowBox[{"25", " ", 
                    SuperscriptBox["n", "3"]}], "-", 
                    RowBox[{"15", " ", 
                    SuperscriptBox["n", "2"]}], "+", 
                    RowBox[{"26", " ", "n"}], "+", "24"}], ")"}], " ", 
                    SuperscriptBox["z", "5"]}], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox["z", "6"], ")"}], 
                    SeriesData[$CellContext`z, 0, {}, 0, 6, 1], Editable -> 
                    False]}], 
                  RowBox[{"SeriesData", "[", 
                    RowBox[{"z", ",", "0", ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", 
                    FractionBox[
                    RowBox[{"1", "-", "n"}], "2"], ",", 
                    RowBox[{
                    FractionBox["1", "6"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "1"}], "+", 
                    SuperscriptBox["n", "2"]}], ")"}]}], ",", 
                    RowBox[{
                    FractionBox["1", "24"], " ", 
                    RowBox[{"(", 
                    RowBox[{"2", "+", "n", "-", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["n", "2"]}], "-", 
                    SuperscriptBox["n", "3"]}], ")"}]}], ",", 
                    RowBox[{
                    FractionBox["1", "120"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "6"}], "-", 
                    RowBox[{"5", " ", "n"}], "+", 
                    RowBox[{"5", " ", 
                    SuperscriptBox["n", "2"]}], "+", 
                    RowBox[{"5", " ", 
                    SuperscriptBox["n", "3"]}], "+", 
                    SuperscriptBox["n", "4"]}], ")"}]}], ",", 
                    RowBox[{
                    FractionBox["1", "720"], " ", 
                    RowBox[{"(", 
                    RowBox[{"24", "+", 
                    RowBox[{"26", " ", "n"}], "-", 
                    RowBox[{"15", " ", 
                    SuperscriptBox["n", "2"]}], "-", 
                    RowBox[{"25", " ", 
                    SuperscriptBox["n", "3"]}], "-", 
                    RowBox[{"9", " ", 
                    SuperscriptBox["n", "4"]}], "-", 
                    SuperscriptBox["n", "5"]}], ")"}]}]}], "}"}], ",", "0", 
                    ",", "6", ",", "1"}], "]"}]}, "SeriesData", 
                 DisplayFunction -> (#& ), InterpretationFunction -> (#2& ), 
                 SyntaxForm -> Plus]}, {
                StyleBox[
                 
                 RowBox[{
                  "\"(\"", "\[NoBreak]", "\"Taylor series\"", "\[NoBreak]", 
                   "\")\""}], {FontFamily -> "Verdana", FontSize -> 10, 
                  GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}, StripOnInput -> False]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More terms", "input" -> 
         "SeriesExpansionAtZ = 0__More terms"}, {}]}]}], Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {True, False, {False}, True},
    Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "2", "datatypes" -> 
    "Series", "timedout" -> "", "timedoutpods" -> "", "timing" -> "4.124", 
    "parsetiming" -> "1.79", "parsetimedout" -> "false", "recalculate" -> "", 
    "id" -> "MSPa01h308d61i34477170000626de27c67f0dd42", "host" -> 
    "http://www4c.wolframalpha.com", "server" -> "51", "related" -> 
    "http://www4c.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa11h308d61i344771700004i02c13f0be12b80&s=51", "version" -> "2.6", 
    "profile" -> "EnterDoQuery:0.,StartWrap:4.12425"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> -5., 
    "Date" -> {2016, 2, 21, 2, 5, 59.598626`8.527811220601446}, "Line" -> 24, 
    "SessionID" -> 24653742985256794637}, Typeset`showpods$$ = {1, 2}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = False, 
   Typeset`newq$$ = 
   "series -(((z + 1)^-n - 1)/(z*n))*(1 + z) for around z=0"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$}, {Typeset`aux1$$, Typeset`aux2$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{651., {128., 133.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; 
     WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print",
 CellMargins->{{20, 10}, {Inherited, Inherited}},
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellChangeTimes->{3.6650271596562777`*^9, 3.665057199026256*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryParseResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "(1+z+B)^T=(1+z)^T*(1+X*-(((z + 1)^-T - 1)/z) ) solve for B", 
   Typeset`newq$$ = 
   "(1+z+B)^T=(1+z)^T*(1+X*-(((z + 1)^-T - 1)/z) ) solve for B", 
   Typeset`chosen$$ = 
   "Solve[(1 + B + z)^T == (1 + z)^T*(1 - (X*(-1 + (1 + z)^(-T)))/z), B, \
MaxExtraConditions -> Automatic]", Typeset`open$$ = False}, 
   PaneSelectorBox[{False->
    DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
     WolframAlphaClient`Private`assumptionsQ$$ = False}, 
     TagBox[
      FrameBox[
       TagBox[GridBox[{
          {
           InputFieldBox[Dynamic[Typeset`newq$$], String,
            Appearance->None,
            BaseStyle->{"CalculateInput"},
            ContinuousAction->True,
            Enabled->True,
            FieldSize->{{1, 40}, {1, 
               DirectedInfinity[1]}},
            TrapSelection->False], 
           ItemBox[
            ButtonBox[
             PaneSelectorBox[{True->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "OrangeSquarePlus"],
                 ImageSizeCache->{10., {3., 8.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ], False->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "GraySquarePlus"],
                 ImageSizeCache->{10., {3., 8.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ]}, Dynamic[WolframAlphaClient`Private`show$$],
              ImageSize->All],
             Appearance->None,
             ButtonFunction:>(Quiet[
                WolframAlpha[]]; If[
                Or[
                 CurrentValue["OptionKey"], 
                 CurrentValue["AltKey"]], SelectionMove[
                  ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                  Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                   "TextForm"], All], Typeset`open$$ = True; 
                WolframAlphaClient`Private`extrudeFromFastParse[
                 "(1+z+B)^T=(1+z)^T*(1+X*-(((z + 1)^-T - 1)/z) ) solve for B", 
                  Defer[
                   
                   Solve[(1 + Global`B + Global`z)^
                    Global`T == (1 + Global`z)^Global`T (
                    1 - (Global`X (-1 + (1 + Global`z)^(-Global`T)))/
                    Global`z), Global`B, MaxExtraConditions -> Automatic]], 
                  "Fast parse"]; Typeset`open$$ = False]),
             Evaluator->Automatic,
             Method->"Queued"],
            Alignment->{Right, Top},
            StripOnInput->False]},
          {
           PaneBox[
            TagBox[
             TooltipBox[
              ButtonBox[
               PaneSelectorBox[{False->
                StyleBox[
                 RowBox[{"Solve", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", " ", "+", " ", "B", " ", "+", " ", "z"}], 
                    ")"}], "^", "T"}], " ", "==", " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", " ", "+", " ", "z"}], ")"}], "^", "T"}], "*", 
                    RowBox[{"(", 
                    RowBox[{"1", " ", "-", " ", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"X", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "1"}], " ", "+", " ", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", " ", "+", " ", "z"}], ")"}], "^", 
                    RowBox[{"(", 
                    RowBox[{"-", "T"}], ")"}]}]}], ")"}]}], ")"}], "/", 
                    "z"}]}], ")"}]}]}], ",", " ", "B", ",", " ", 
                   RowBox[{
                   "MaxExtraConditions", " ", "->", " ", "Automatic"}]}], 
                  "]"}],
                 StripOnInput->False,
                 NumberMarks->False], True->
                StyleBox[
                 RowBox[{"Solve", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", " ", "+", " ", "B", " ", "+", " ", "z"}], 
                    ")"}], "^", "T"}], " ", "==", " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", " ", "+", " ", "z"}], ")"}], "^", "T"}], "*", 
                    RowBox[{"(", 
                    RowBox[{"1", " ", "-", " ", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"X", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "1"}], " ", "+", " ", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", " ", "+", " ", "z"}], ")"}], "^", 
                    RowBox[{"(", 
                    RowBox[{"-", "T"}], ")"}]}]}], ")"}]}], ")"}], "/", 
                    "z"}]}], ")"}]}]}], ",", " ", "B", ",", " ", 
                   RowBox[{
                   "MaxExtraConditions", " ", "->", " ", "Automatic"}]}], 
                  "]"}],
                 StripOnInput->False,
                 ShowSyntaxStyles->False,
                 NumberMarks->False,
                 FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                 CurrentValue["MouseOver"]],
                BaseStyle->{ShowStringCharacters -> True},
                FrameMargins->0,
                ImageSize->Automatic],
               Alignment->Left,
               Appearance->None,
               BaseStyle->{},
               ButtonFunction:>(SelectionMove[
                  ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                   BoxData[
                    RowBox[{"Solve", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", " ", "+", " ", "B", " ", "+", " ", "z"}], 
                    ")"}], "^", "T"}], " ", "==", " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", " ", "+", " ", "z"}], ")"}], "^", "T"}], "*", 
                    RowBox[{"(", 
                    RowBox[{"1", " ", "-", " ", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"X", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "1"}], " ", "+", " ", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", " ", "+", " ", "z"}], ")"}], "^", 
                    RowBox[{"(", 
                    RowBox[{"-", "T"}], ")"}]}]}], ")"}]}], ")"}], "/", 
                    "z"}]}], ")"}]}]}], ",", " ", "B", ",", " ", 
                    
                    RowBox[{
                    "MaxExtraConditions", " ", "->", " ", "Automatic"}]}], 
                    "]"}]], "Input"], All]; SelectionMove[
                  ButtonNotebook[], After, CellContents]),
               Evaluator->Automatic,
               ImageSize->Automatic,
               Method->"Preemptive"],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
              "Tooltip"]& ],
            AppearanceElements->{},
            BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
            ImageSize->{Automatic, {1, 100}},
            Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         FrameStyle->GrayLevel[0.85],
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxDividers->{
          "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"],
       Alignment->Top,
       Background->Dynamic[
         FEPrivate`If[
          FEPrivate`And[
           FEPrivate`SameQ[
            FEPrivate`Head[Typeset`newq$$], String], 
           FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
          RGBColor[1., 0.975, 0.95], 
          GrayLevel[1]]],
       BaselinePosition->Baseline,
       FrameStyle->GrayLevel[0.85],
       ImageSize->Automatic,
       RoundingRadius->5,
       StripOnInput->False],
      EventHandlerTag[{
       "MouseEntered" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, True], "MouseExited" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, False], 
        PassEventsDown -> Automatic, PassEventsUp -> True}]],
     DynamicModuleValues:>{}], True->
    TagBox[GridBox[{
       {
        DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
         WolframAlphaClient`Private`assumptionsQ$$ = False}, 
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               InputFieldBox[Dynamic[Typeset`newq$$], String,
                Appearance->None,
                BaseStyle->{"CalculateInput"},
                ContinuousAction->True,
                Enabled->True,
                FieldSize->{{1, 40}, {1, 
                   DirectedInfinity[1]}},
                TrapSelection->False], 
               ItemBox[
                ButtonBox[
                 PaneSelectorBox[{True->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "OrangeSquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ], False->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "GraySquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ]}, Dynamic[
                  WolframAlphaClient`Private`show$$],
                  ImageSize->All],
                 Appearance->None,
                 ButtonFunction:>(Quiet[
                    WolframAlpha[]]; If[
                    Or[
                    CurrentValue["OptionKey"], 
                    CurrentValue["AltKey"]], SelectionMove[
                    ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                    NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                    "TextForm"], All], Typeset`open$$ = True; 
                    WolframAlphaClient`Private`extrudeFromFastParse[
                    "(1+z+B)^T=(1+z)^T*(1+X*-(((z + 1)^-T - 1)/z) ) solve for \
B", 
                    Defer[
                    
                    Solve[(1 + Global`B + Global`z)^
                    Global`T == (1 + Global`z)^Global`T (
                    1 - (Global`X (-1 + (1 + Global`z)^(-Global`T)))/
                    Global`z), Global`B, MaxExtraConditions -> Automatic]], 
                    "Fast parse"]; Typeset`open$$ = False]),
                 Evaluator->Automatic,
                 Method->"Queued"],
                Alignment->{Right, Top},
                StripOnInput->False]},
              {
               PaneBox[
                TagBox[
                 TooltipBox[
                  ButtonBox[
                   PaneSelectorBox[{False->
                    StyleBox[
                    RowBox[{"Solve", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", " ", "+", " ", "B", " ", "+", " ", "z"}], 
                    ")"}], "^", "T"}], " ", "==", " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", " ", "+", " ", "z"}], ")"}], "^", "T"}], "*", 
                    RowBox[{"(", 
                    RowBox[{"1", " ", "-", " ", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"X", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "1"}], " ", "+", " ", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", " ", "+", " ", "z"}], ")"}], "^", 
                    RowBox[{"(", 
                    RowBox[{"-", "T"}], ")"}]}]}], ")"}]}], ")"}], "/", 
                    "z"}]}], ")"}]}]}], ",", " ", "B", ",", " ", 
                    RowBox[{
                    "MaxExtraConditions", " ", "->", " ", "Automatic"}]}], 
                    "]"}],
                    StripOnInput->False,
                    NumberMarks->False], True->
                    StyleBox[
                    RowBox[{"Solve", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", " ", "+", " ", "B", " ", "+", " ", "z"}], 
                    ")"}], "^", "T"}], " ", "==", " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", " ", "+", " ", "z"}], ")"}], "^", "T"}], "*", 
                    RowBox[{"(", 
                    RowBox[{"1", " ", "-", " ", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"X", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "1"}], " ", "+", " ", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", " ", "+", " ", "z"}], ")"}], "^", 
                    RowBox[{"(", 
                    RowBox[{"-", "T"}], ")"}]}]}], ")"}]}], ")"}], "/", 
                    "z"}]}], ")"}]}]}], ",", " ", "B", ",", " ", 
                    RowBox[{
                    "MaxExtraConditions", " ", "->", " ", "Automatic"}]}], 
                    "]"}],
                    StripOnInput->False,
                    ShowSyntaxStyles->False,
                    NumberMarks->False,
                    FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{ShowStringCharacters -> True},
                    FrameMargins->0,
                    ImageSize->Automatic],
                   Alignment->Left,
                   Appearance->None,
                   BaseStyle->{},
                   ButtonFunction:>(SelectionMove[
                    ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    BoxData[
                    RowBox[{"Solve", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", " ", "+", " ", "B", " ", "+", " ", "z"}], 
                    ")"}], "^", "T"}], " ", "==", " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", " ", "+", " ", "z"}], ")"}], "^", "T"}], "*", 
                    RowBox[{"(", 
                    RowBox[{"1", " ", "-", " ", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"X", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "1"}], " ", "+", " ", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", " ", "+", " ", "z"}], ")"}], "^", 
                    RowBox[{"(", 
                    RowBox[{"-", "T"}], ")"}]}]}], ")"}]}], ")"}], "/", 
                    "z"}]}], ")"}]}]}], ",", " ", "B", ",", " ", 
                    
                    RowBox[{"MaxExtraConditions", " ", "->", " ", 
                    "Automatic"}]}], "]"}]], "Input"], All]; SelectionMove[
                    ButtonNotebook[], After, CellContents]),
                   Evaluator->Automatic,
                   ImageSize->Automatic,
                   Method->"Preemptive"],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                    StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
                  "Tooltip"]& ],
                AppearanceElements->{},
                BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
                ImageSize->{Automatic, {1, 100}},
                Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             BaselinePosition->{1, 1},
             FrameStyle->GrayLevel[0.85],
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxDividers->{
              "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           Alignment->Top,
           Background->Dynamic[
             FEPrivate`If[
              FEPrivate`And[
               FEPrivate`SameQ[
                FEPrivate`Head[Typeset`newq$$], String], 
               FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
              RGBColor[1., 0.975, 0.95], 
              GrayLevel[1]]],
           BaselinePosition->Baseline,
           FrameStyle->GrayLevel[0.85],
           ImageSize->Automatic,
           RoundingRadius->5,
           StripOnInput->False],
          
          EventHandlerTag[{
           "MouseEntered" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, True], 
            "MouseExited" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, False], 
            PassEventsDown -> Automatic, PassEventsUp -> True}]],
         DynamicModuleValues:>{}]},
       {
        InterpretationBox[
         StyleBox[
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEExpressions", "NecklaceAnimator"][20]],
          AnimatorBoxOptions->{ImageSize->20}],
         Animator[Appearance -> "Necklace", ImageSize -> 20],
         BaseStyle->{"Deploy"}]}
      },
      BaselinePosition->{1, 1},
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     
     "Column"]}, Dynamic[
     TrueQ[Typeset`open$$]],
    BaseStyle->{Deployed -> True},
    ImageSize->Automatic],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "(1+z+B)^T=(1+z)^T*(1+X*-(((z + 1)^-T - 1)/z) ) solve for B", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {30, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "http://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
    
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Solve[(1 + B + z)^T == (1 + z)^T (1 - (X (-1 + (1 + z)^(-T)))/z), B, \
MaxExtraConditions -> Automatic]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"solve\"", {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    TagBox[
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "+", "z", "+", "B"}], ")"}], "T"], 
                    "\[LongEqual]", 
                    TagBox[
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "+", "z"}], ")"}], "T"], " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    RowBox[{"X", 
                    StyleBox["\[Times]", 
                    GrayLevel[0.6]], 
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], 
                    StyleBox["\[Times]", 
                    GrayLevel[0.6]], 
                    TagBox[
                    FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"z", "+", "1"}], ")"}], 
                    RowBox[{"-", "T"}]], "-", "1"}], "z"], 
                    PolynomialForm[#, TraditionalOrder -> False]& ]}]}], 
                    ")"}]}], Identity]}], HoldForm], 
                    StyleBox["\" for \"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False], "B"}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None, None, None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    $CellContext`TagBoxWrapper["Separator" -> " "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnsEqual -> False, RowsEqual -> False, 
               GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
               AllowScriptLevelChange -> False], 
              $CellContext`TagBoxWrapper["Separator" -> " "]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {}]}], 
       XMLElement["dataformats", {}, {"plaintext,minput"}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Result", "scanner" -> "Solve", "id" -> "Result", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "1", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Solve[(1 + B + z)^T == (1 + z)^T (1 - (X (-1 + (1 + z)^(-T)))/z), \
{B}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{"B", "\[LongEqual]", 
              TagBox[
               RowBox[{
                 SuperscriptBox[
                  RowBox[{"(", 
                    RowBox[{
                    FractionBox[
                    RowBox[{"X", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"z", "+", "1"}], ")"}], "T"]}], "z"], "+", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"z", "+", "1"}], ")"}], "T"], "-", 
                    FractionBox["X", "z"]}], ")"}], 
                  FractionBox["1", "T"]], "-", "z", "-", "1"}], Identity]}], 
            TraditionalForm]], "Output", {}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Result__Step-by-step solution"}, {}]}]}], Typeset`pod3$$, 
   Typeset`pod4$$, Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, 
   Typeset`pod8$$, Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, 
   Typeset`pod12$$, Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, 
   Typeset`pod16$$, Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, 
   Typeset`pod20$$, Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, 
   Typeset`pod24$$, Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, 
   Typeset`pod28$$, Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, 
   Typeset`pod32$$, Typeset`aux1$$ = {True, False, {False}, True}, 
   Typeset`aux2$$ = {True, False, {False}, True}, Typeset`aux3$$ = {
   True, False, {False}, True}, Typeset`aux4$$ = {True, False, {False}, True},
    Typeset`aux5$$ = {True, False, {False}, True}, Typeset`aux6$$ = {
   True, False, {False}, True}, Typeset`aux7$$ = {True, False, {False}, True},
    Typeset`aux8$$ = {True, False, {False}, True}, Typeset`aux9$$ = {
   True, False, {False}, True}, Typeset`aux10$$ = {
   True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`aux14$$ = {
   True, False, {False}, True}, Typeset`aux15$$ = {
   True, False, {False}, True}, Typeset`aux16$$ = {
   True, False, {False}, True}, Typeset`aux17$$ = {
   True, False, {False}, True}, Typeset`aux18$$ = {
   True, False, {False}, True}, Typeset`aux19$$ = {
   True, False, {False}, True}, Typeset`aux20$$ = {
   True, False, {False}, True}, Typeset`aux21$$ = {
   True, False, {False}, True}, Typeset`aux22$$ = {
   True, False, {False}, True}, Typeset`aux23$$ = {
   True, False, {False}, True}, Typeset`aux24$$ = {
   True, False, {False}, True}, Typeset`aux25$$ = {
   True, False, {False}, True}, Typeset`aux26$$ = {
   True, False, {False}, True}, Typeset`aux27$$ = {
   True, False, {False}, True}, Typeset`aux28$$ = {
   True, False, {False}, True}, Typeset`aux29$$ = {
   True, False, {False}, True}, Typeset`aux30$$ = {
   True, False, {False}, True}, Typeset`aux31$$ = {
   True, False, {False}, True}, Typeset`aux32$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = True, 
   Typeset`queryinfo$$ = {{
    "success" -> "true", "error" -> "false", "numpods" -> "2", "datatypes" -> 
     "Solve", "timedout" -> "Solve", "timedoutpods" -> "", "timing" -> 
     "3.358", "parsetiming" -> "1.398", "parsetimedout" -> "false", 
     "recalculate" -> 
     "http://www4b.wolframalpha.com/api/v2/recalc.jsp?id=\
MSPa109720diffabgg00i4cb000061e6444e41302f23&s=36", "id" -> 
     "MSPa109820diffabgg00i4cb000064g0bi001026gchb", "host" -> 
     "http://www4b.wolframalpha.com", "server" -> "36", "related" -> 
     "http://www4b.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa109920diffabgg00i4cb00002efih04ief5g13g1&s=36", "version" -> "2.6", 
     "profile" -> "EnterDoQuery:0.,StartWrap:3.35757"}, {
    "success" -> "true", "error" -> "false", "numpods" -> "0", "datatypes" -> 
     "Solve", "timedout" -> "Solve", "timedoutpods" -> "", "timing" -> 
     "2.723", "parsetiming" -> "0.", "parsetimedout" -> "false", 
     "recalculate" -> "", "id" -> "", "host" -> 
     "http://www4b.wolframalpha.com", "server" -> "36", "related" -> "", 
     "version" -> "2.6", "profile" -> "EnterDoRecalculate:0."}}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> -5., 
    "Date" -> {2016, 2, 21, 10, 31, 55.297789`8.495282741190257}, "Line" -> 
    27, "SessionID" -> 24653742985256794637}, Typeset`showpods$$ = {1, 2}, 
   Typeset`failedpods$$ = {3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 
   17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32}, 
   Typeset`chosen$$ = {}, Typeset`open$$ = False, Typeset`newq$$ = 
   "(1+z+B)^T=(1+z)^T*(1+X*-(((z + 1)^-T - 1)/z) ) solve for B"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
         Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
         Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
         Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
         Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, 
         Typeset`pod32$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
         Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
         Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
         Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
         Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{651., {108., 114.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; AlphaIntegration`DoAsyncInitialization[
       Hold[{
        2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
          Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
          Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
          Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
          Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
          Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
          Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
          Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, 
          Typeset`pod32$$}, {
         Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
          Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
          Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
          Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
          Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
          Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
          Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
          Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$},
          Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
         Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
         Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
         Typeset`newq$$, 
         "http://www4b.wolframalpha.com/api/v2/recalc.jsp?id=\
MSPa109720diffabgg00i4cb000061e6444e41302f23&s=36", Typeset`asyncpods$$}]]; 
     Typeset`asyncpods$$ = {}; Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print",
 CellMargins->{{20, 10}, {Inherited, Inherited}},
 CellChangeTimes->{3.665057515317769*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"WolframAlpha", "[", 
  RowBox[{
  "\"\<(1+z+B)^T=(1+z)^T*(1+X*-(((z + 1)^-T - 1)/z) ) solve for B\>\"", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\"\<Result\>\"", ",", "1"}], "}"}], ",", "\"\<Plaintext\>\""}],
     "}"}]}], "]"}]], "Input"],

Cell[BoxData["\<\"B\[LongEqual]((X (z+1)^T)/z+(z+1)^T-X/z)^(1/T)-z-1\"\>"], \
"Output",
 CellChangeTimes->{3.665057556765123*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.6650575758742647`*^9, 3.665057577754311*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryParseResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "series ((X (z + 1)^T)/z + (z + 1)^T - X/z)^(1/T) - z - 1 for around X=0", 
   Typeset`newq$$ = 
   "series ((X (z + 1)^T)/z + (z + 1)^T - X/z)^(1/T) - z - 1 for around X=0", 
   Typeset`chosen$$ = 
   "Series[-1 - z + (-(X/z) + (1 + z)^T + (X*(1 + z)^T)/z)^T^(-1), {X, 0, \
5}]", Typeset`open$$ = False}, 
   PaneSelectorBox[{False->
    DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
     WolframAlphaClient`Private`assumptionsQ$$ = False}, 
     TagBox[
      FrameBox[
       TagBox[GridBox[{
          {
           InputFieldBox[Dynamic[Typeset`newq$$], String,
            Appearance->None,
            BaseStyle->{"CalculateInput"},
            ContinuousAction->True,
            Enabled->True,
            FieldSize->{{1, 40}, {1, 
               DirectedInfinity[1]}},
            TrapSelection->False], 
           ItemBox[
            ButtonBox[
             PaneSelectorBox[{True->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "OrangeSquarePlus"],
                 ImageSizeCache->{10., {3., 8.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ], False->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "GraySquarePlus"],
                 ImageSizeCache->{10., {3., 8.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ]}, Dynamic[WolframAlphaClient`Private`show$$],
              ImageSize->All],
             Appearance->None,
             ButtonFunction:>(Quiet[
                WolframAlpha[]]; If[
                Or[
                 CurrentValue["OptionKey"], 
                 CurrentValue["AltKey"]], SelectionMove[
                  ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                  Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                   "TextForm"], All], Typeset`open$$ = True; 
                WolframAlphaClient`Private`extrudeFromFastParse[
                 "series ((X (z + 1)^T)/z + (z + 1)^T - X/z)^(1/T) - z - 1 \
for around X=0", 
                  Defer[
                   
                   Series[-1 - 
                    Global`z + (-(Global`X/Global`z) + (1 + Global`z)^
                    Global`T + (Global`X (1 + Global`z)^Global`T)/Global`z)^(
                    Global`T^(-1)), {Global`X, 0, 5}]], "Fast parse"]; 
                Typeset`open$$ = False]),
             Evaluator->Automatic,
             Method->"Queued"],
            Alignment->{Right, Top},
            StripOnInput->False]},
          {
           PaneBox[
            TagBox[
             TooltipBox[
              ButtonBox[
               PaneSelectorBox[{False->
                StyleBox[
                 RowBox[{"Series", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"-", "1"}], " ", "-", " ", "z", " ", "+", " ", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{"X", "/", "z"}], ")"}]}], " ", "+", " ", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", " ", "+", " ", "z"}], ")"}], "^", "T"}], " ",
                     "+", " ", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"X", "*", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", " ", "+", " ", "z"}], ")"}], "^", "T"}]}], 
                    ")"}], "/", "z"}]}], ")"}], "^", 
                    RowBox[{"T", "^", 
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}]}]}]}], ",", " ", 
                   RowBox[{"{", 
                    RowBox[{"X", ",", " ", "0", ",", " ", "5"}], "}"}]}], 
                  "]"}],
                 StripOnInput->False,
                 NumberMarks->False], True->
                StyleBox[
                 RowBox[{"Series", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"-", "1"}], " ", "-", " ", "z", " ", "+", " ", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{"X", "/", "z"}], ")"}]}], " ", "+", " ", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", " ", "+", " ", "z"}], ")"}], "^", "T"}], " ",
                     "+", " ", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"X", "*", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", " ", "+", " ", "z"}], ")"}], "^", "T"}]}], 
                    ")"}], "/", "z"}]}], ")"}], "^", 
                    RowBox[{"T", "^", 
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}]}]}]}], ",", " ", 
                   RowBox[{"{", 
                    RowBox[{"X", ",", " ", "0", ",", " ", "5"}], "}"}]}], 
                  "]"}],
                 StripOnInput->False,
                 ShowSyntaxStyles->False,
                 NumberMarks->False,
                 FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                 CurrentValue["MouseOver"]],
                BaseStyle->{ShowStringCharacters -> True},
                FrameMargins->0,
                ImageSize->Automatic],
               Alignment->Left,
               Appearance->None,
               BaseStyle->{},
               ButtonFunction:>(SelectionMove[
                  ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                   BoxData[
                    RowBox[{"Series", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "1"}], " ", "-", " ", "z", " ", "+", " ", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{"X", "/", "z"}], ")"}]}], " ", "+", " ", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", " ", "+", " ", "z"}], ")"}], "^", "T"}], " ",
                     "+", " ", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"X", "*", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", " ", "+", " ", "z"}], ")"}], "^", "T"}]}], 
                    ")"}], "/", "z"}]}], ")"}], "^", 
                    RowBox[{"T", "^", 
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}]}]}]}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"X", ",", " ", "0", ",", " ", "5"}], "}"}]}], 
                    "]"}]], "Input"], All]; SelectionMove[
                  ButtonNotebook[], After, CellContents]),
               Evaluator->Automatic,
               ImageSize->Automatic,
               Method->"Preemptive"],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
              "Tooltip"]& ],
            AppearanceElements->{},
            BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
            ImageSize->{Automatic, {1, 100}},
            Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         FrameStyle->GrayLevel[0.85],
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxDividers->{
          "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"],
       Alignment->Top,
       Background->Dynamic[
         FEPrivate`If[
          FEPrivate`And[
           FEPrivate`SameQ[
            FEPrivate`Head[Typeset`newq$$], String], 
           FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
          RGBColor[1., 0.975, 0.95], 
          GrayLevel[1]]],
       BaselinePosition->Baseline,
       FrameStyle->GrayLevel[0.85],
       ImageSize->Automatic,
       RoundingRadius->5,
       StripOnInput->False],
      EventHandlerTag[{
       "MouseEntered" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, True], "MouseExited" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, False], 
        PassEventsDown -> Automatic, PassEventsUp -> True}]],
     DynamicModuleValues:>{}], True->
    TagBox[GridBox[{
       {
        DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
         WolframAlphaClient`Private`assumptionsQ$$ = False}, 
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               InputFieldBox[Dynamic[Typeset`newq$$], String,
                Appearance->None,
                BaseStyle->{"CalculateInput"},
                ContinuousAction->True,
                Enabled->True,
                FieldSize->{{1, 40}, {1, 
                   DirectedInfinity[1]}},
                TrapSelection->False], 
               ItemBox[
                ButtonBox[
                 PaneSelectorBox[{True->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "OrangeSquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ], False->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "GraySquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ]}, Dynamic[
                  WolframAlphaClient`Private`show$$],
                  ImageSize->All],
                 Appearance->None,
                 ButtonFunction:>(Quiet[
                    WolframAlpha[]]; If[
                    Or[
                    CurrentValue["OptionKey"], 
                    CurrentValue["AltKey"]], SelectionMove[
                    ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                    NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                    "TextForm"], All], Typeset`open$$ = True; 
                    WolframAlphaClient`Private`extrudeFromFastParse[
                    "series ((X (z + 1)^T)/z + (z + 1)^T - X/z)^(1/T) - z - 1 \
for around X=0", 
                    Defer[
                    
                    Series[-1 - 
                    Global`z + (-(Global`X/Global`z) + (1 + Global`z)^
                    Global`T + (Global`X (1 + Global`z)^Global`T)/Global`z)^(
                    Global`T^(-1)), {Global`X, 0, 5}]], "Fast parse"]; 
                    Typeset`open$$ = False]),
                 Evaluator->Automatic,
                 Method->"Queued"],
                Alignment->{Right, Top},
                StripOnInput->False]},
              {
               PaneBox[
                TagBox[
                 TooltipBox[
                  ButtonBox[
                   PaneSelectorBox[{False->
                    StyleBox[
                    RowBox[{"Series", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "1"}], " ", "-", " ", "z", " ", "+", " ", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{"X", "/", "z"}], ")"}]}], " ", "+", " ", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", " ", "+", " ", "z"}], ")"}], "^", "T"}], " ",
                     "+", " ", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"X", "*", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", " ", "+", " ", "z"}], ")"}], "^", "T"}]}], 
                    ")"}], "/", "z"}]}], ")"}], "^", 
                    RowBox[{"T", "^", 
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}]}]}]}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"X", ",", " ", "0", ",", " ", "5"}], "}"}]}], 
                    "]"}],
                    StripOnInput->False,
                    NumberMarks->False], True->
                    StyleBox[
                    RowBox[{"Series", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "1"}], " ", "-", " ", "z", " ", "+", " ", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{"X", "/", "z"}], ")"}]}], " ", "+", " ", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", " ", "+", " ", "z"}], ")"}], "^", "T"}], " ",
                     "+", " ", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"X", "*", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", " ", "+", " ", "z"}], ")"}], "^", "T"}]}], 
                    ")"}], "/", "z"}]}], ")"}], "^", 
                    RowBox[{"T", "^", 
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}]}]}]}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"X", ",", " ", "0", ",", " ", "5"}], "}"}]}], 
                    "]"}],
                    StripOnInput->False,
                    ShowSyntaxStyles->False,
                    NumberMarks->False,
                    FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{ShowStringCharacters -> True},
                    FrameMargins->0,
                    ImageSize->Automatic],
                   Alignment->Left,
                   Appearance->None,
                   BaseStyle->{},
                   ButtonFunction:>(SelectionMove[
                    ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    BoxData[
                    RowBox[{"Series", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "1"}], " ", "-", " ", "z", " ", "+", " ", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{"X", "/", "z"}], ")"}]}], " ", "+", " ", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", " ", "+", " ", "z"}], ")"}], "^", "T"}], " ",
                     "+", " ", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"X", "*", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", " ", "+", " ", "z"}], ")"}], "^", "T"}]}], 
                    ")"}], "/", "z"}]}], ")"}], "^", 
                    RowBox[{"T", "^", 
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}]}]}]}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"X", ",", " ", "0", ",", " ", "5"}], "}"}]}], 
                    "]"}]], "Input"], All]; SelectionMove[
                    ButtonNotebook[], After, CellContents]),
                   Evaluator->Automatic,
                   ImageSize->Automatic,
                   Method->"Preemptive"],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                    StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
                  "Tooltip"]& ],
                AppearanceElements->{},
                BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
                ImageSize->{Automatic, {1, 100}},
                Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             BaselinePosition->{1, 1},
             FrameStyle->GrayLevel[0.85],
             GridBoxAlignment->{"Columns" -> {{Left}}},
             GridBoxDividers->{
              "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           Alignment->Top,
           Background->Dynamic[
             FEPrivate`If[
              FEPrivate`And[
               FEPrivate`SameQ[
                FEPrivate`Head[Typeset`newq$$], String], 
               FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
              RGBColor[1., 0.975, 0.95], 
              GrayLevel[1]]],
           BaselinePosition->Baseline,
           FrameStyle->GrayLevel[0.85],
           ImageSize->Automatic,
           RoundingRadius->5,
           StripOnInput->False],
          
          EventHandlerTag[{
           "MouseEntered" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, True], 
            "MouseExited" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, False], 
            PassEventsDown -> Automatic, PassEventsUp -> True}]],
         DynamicModuleValues:>{}]},
       {
        InterpretationBox[
         StyleBox[
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEExpressions", "NecklaceAnimator"][20]],
          AnimatorBoxOptions->{ImageSize->20}],
         Animator[Appearance -> "Necklace", ImageSize -> 20],
         BaseStyle->{"Deploy"}]}
      },
      BaselinePosition->{1, 1},
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     
     "Column"]}, Dynamic[
     TrueQ[Typeset`open$$]],
    BaseStyle->{Deployed -> True},
    ImageSize->Automatic],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "1"}], "-", "z", "+", 
     SuperscriptBox[
      RowBox[{"(", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"1", "+", "z"}], ")"}], "T"], ")"}], 
      FractionBox["1", "T"]]}], ")"}], "+", 
   FractionBox[
    RowBox[{
     SuperscriptBox[
      RowBox[{"(", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"1", "+", "z"}], ")"}], "T"], ")"}], 
      RowBox[{
       RowBox[{"-", "1"}], "+", 
       FractionBox["1", "T"]}]], " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "1"}], "+", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"1", "+", "z"}], ")"}], "T"]}], ")"}], " ", "X"}], 
    RowBox[{"T", " ", "z"}]], "+", 
   FractionBox[
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "1"}], "+", 
       FractionBox["1", "T"]}], ")"}], " ", 
     SuperscriptBox[
      RowBox[{"(", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"1", "+", "z"}], ")"}], "T"], ")"}], 
      RowBox[{
       RowBox[{"-", "2"}], "+", 
       FractionBox["1", "T"]}]], " ", 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "1"}], "+", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"1", "+", "z"}], ")"}], "T"]}], ")"}], "2"], " ", 
     SuperscriptBox["X", "2"]}], 
    RowBox[{"2", " ", "T", " ", 
     SuperscriptBox["z", "2"]}]], "+", 
   FractionBox[
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "2"}], "+", 
       FractionBox["1", "T"]}], ")"}], " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "1"}], "+", 
       FractionBox["1", "T"]}], ")"}], " ", 
     SuperscriptBox[
      RowBox[{"(", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"1", "+", "z"}], ")"}], "T"], ")"}], 
      RowBox[{
       RowBox[{"-", "3"}], "+", 
       FractionBox["1", "T"]}]], " ", 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "1"}], "+", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"1", "+", "z"}], ")"}], "T"]}], ")"}], "3"], " ", 
     SuperscriptBox["X", "3"]}], 
    RowBox[{"6", " ", "T", " ", 
     SuperscriptBox["z", "3"]}]], "+", 
   FractionBox[
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "3"}], "+", 
       FractionBox["1", "T"]}], ")"}], " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "2"}], "+", 
       FractionBox["1", "T"]}], ")"}], " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "1"}], "+", 
       FractionBox["1", "T"]}], ")"}], " ", 
     SuperscriptBox[
      RowBox[{"(", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"1", "+", "z"}], ")"}], "T"], ")"}], 
      RowBox[{
       RowBox[{"-", "4"}], "+", 
       FractionBox["1", "T"]}]], " ", 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "1"}], "+", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"1", "+", "z"}], ")"}], "T"]}], ")"}], "4"], " ", 
     SuperscriptBox["X", "4"]}], 
    RowBox[{"24", " ", "T", " ", 
     SuperscriptBox["z", "4"]}]], "+", 
   FractionBox[
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "4"}], "+", 
       FractionBox["1", "T"]}], ")"}], " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "3"}], "+", 
       FractionBox["1", "T"]}], ")"}], " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "2"}], "+", 
       FractionBox["1", "T"]}], ")"}], " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "1"}], "+", 
       FractionBox["1", "T"]}], ")"}], " ", 
     SuperscriptBox[
      RowBox[{"(", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"1", "+", "z"}], ")"}], "T"], ")"}], 
      RowBox[{
       RowBox[{"-", "5"}], "+", 
       FractionBox["1", "T"]}]], " ", 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "1"}], "+", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"1", "+", "z"}], ")"}], "T"]}], ")"}], "5"], " ", 
     SuperscriptBox["X", "5"]}], 
    RowBox[{"120", " ", "T", " ", 
     SuperscriptBox["z", "5"]}]], "+", 
   InterpretationBox[
    SuperscriptBox[
     RowBox[{"O", "[", "X", "]"}], "6"],
    SeriesData[$CellContext`X, 0, {}, 0, 6, 1],
    Editable->False]}],
  SeriesData[$CellContext`X, 
   0, {-1 - $CellContext`z + ((
       1 + $CellContext`z)^$CellContext`T)^($CellContext`T^(-1)), \
$CellContext`T^(-1) $CellContext`z^(-1) ((
       1 + $CellContext`z)^$CellContext`T)^(-1 + $CellContext`T^(-1)) (-1 + (
       1 + $CellContext`z)^$CellContext`T), 
    Rational[1, 
      2] (-1 + $CellContext`T^(-1)) $CellContext`T^(-1) $CellContext`z^(-2) ((
       1 + $CellContext`z)^$CellContext`T)^(-2 + $CellContext`T^(-1)) (-1 + (
        1 + $CellContext`z)^$CellContext`T)^2, 
    Rational[1, 
      6] (-2 + $CellContext`T^(-1)) (-1 + $CellContext`T^(-1)) \
$CellContext`T^(-1) $CellContext`z^(-3) ((
       1 + $CellContext`z)^$CellContext`T)^(-3 + $CellContext`T^(-1)) (-1 + (
        1 + $CellContext`z)^$CellContext`T)^3, 
    Rational[1, 
      24] (-3 + $CellContext`T^(-1)) (-2 + $CellContext`T^(-1)) (-1 + \
$CellContext`T^(-1)) $CellContext`T^(-1) $CellContext`z^(-4) ((
       1 + $CellContext`z)^$CellContext`T)^(-4 + $CellContext`T^(-1)) (-1 + (
        1 + $CellContext`z)^$CellContext`T)^4, 
    Rational[1, 
      120] (-4 + $CellContext`T^(-1)) (-3 + $CellContext`T^(-1)) (-2 + \
$CellContext`T^(-1)) (-1 + $CellContext`T^(-1)) $CellContext`T^(-1) \
$CellContext`z^(-5) ((
       1 + $CellContext`z)^$CellContext`T)^(-5 + $CellContext`T^(-1)) (-1 + (
        1 + $CellContext`z)^$CellContext`T)^5}, 0, 6, 1],
  Editable->False]], "Output",
 CellChangeTimes->{3.6654448514462833`*^9}]
}, Open  ]],

Cell[BoxData[""], "Input", "Input",
 CellChangeTimes->{{3.665057564978404*^9, 3.665057565049301*^9}}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.665057551866495*^9, 3.665057560406661*^9}}],

Cell[CellGroupData[{

Cell[TextData[{
 "series ",
 Cell[BoxData[
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     SuperscriptBox[
      RowBox[{"(", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"z", "+", "1"}], ")"}], "T"], ")"}], 
      FractionBox["1", "T"]], "-", "z", "-", "1"}], ")"}], "+", 
   FractionBox[
    RowBox[{"X", " ", 
     SuperscriptBox[
      RowBox[{"(", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"z", "+", "1"}], ")"}], "T"], ")"}], 
      RowBox[{
       FractionBox["1", "T"], "-", "1"}]], " ", 
     RowBox[{"(", 
      RowBox[{
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"z", "+", "1"}], ")"}], "T"], "-", "1"}], ")"}]}], 
    RowBox[{"T", " ", "z"}]]}]], "Print",
  CellMargins->{{20, 10}, {Inherited, Inherited}},
  CellChangeTimes->{3.665057957368784*^9}],
 " for around z=0"
}], "WolframAlphaShort",
 CellChangeTimes->{{3.66505823591194*^9, 3.6650582462388906`*^9}}],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "series (((z + 1)^T)^(1/T) - z - 1) + (X ((z + 1)^T)^(1/T - 1) ((z + 1)^T \
- 1))/(T z) for around z=0", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {30, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "http://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
    
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Series[-1 - z + ((1 + z)^T)^T^(-1) + (X ((1 + z)^T)^(-1 + T^(-1)) \
(-1 + (1 + z)^T))/(T z), {z, 0, 5}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"series\"", {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    StyleBox[
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"z", "+", "1"}], ")"}], "T"], ")"}], 
                    RowBox[{"1", "/", "T"}]], "-", "z", "-", "1"}], ")"}], 
                    "+", 
                    FractionBox[
                    TagBox[
                    RowBox[{"X", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"z", "+", "1"}], ")"}], "T"], ")"}], 
                    RowBox[{
                    FractionBox["1", "T"], "-", "1"}]], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"z", "+", "1"}], ")"}], "T"], "-", "1"}], ")"}]}],
                     PolynomialForm[#, TraditionalOrder -> False]& ], 
                    RowBox[{"T", " ", "z"}]]}], ScriptLevel -> 0, 
                    StripOnInput -> False], 
                    StyleBox["\"point\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False], 
                    RowBox[{"z", "\[LongEqual]", "0"}]}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None, None, None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    $CellContext`TagBoxWrapper["Separator" -> " | "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnsEqual -> False, RowsEqual -> False, 
               GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
               AllowScriptLevelChange -> False], 
              $CellContext`TagBoxWrapper["Separator" -> " | "]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {}]}], 
       XMLElement["dataformats", {}, {"plaintext,minput"}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Series expansion at z=0", "scanner" -> "Series", "id" -> 
     "SeriesExpansionAtZ = 0", "position" -> "200", "error" -> "false", 
     "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Series[-1 - z + ((1 + z)^T)^T^(-1) + (X ((1 + z)^T)^(-1 + T^(-1)) \
(-1 + (1 + z)^T))/(T z), {z, 0, 6}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{
                  RowBox[{"X", "-", 
                    RowBox[{
                    FractionBox["1", "2"], " ", "z", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"T", "-", "1"}], ")"}], " ", "X"}], ")"}]}], "+", 
                    
                    RowBox[{
                    FractionBox["1", "6"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    SuperscriptBox["T", "2"], "-", "1"}], ")"}], " ", "X", 
                    " ", 
                    SuperscriptBox["z", "2"]}], "-", 
                    RowBox[{
                    FractionBox["1", "24"], " ", 
                    SuperscriptBox["z", "3"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    SuperscriptBox["T", "3"], "+", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["T", "2"]}], "-", "T", "-", "2"}], ")"}], 
                    " ", "X"}], ")"}]}], "+", 
                    RowBox[{
                    FractionBox["1", "120"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    SuperscriptBox["T", "4"], "+", 
                    RowBox[{"5", " ", 
                    SuperscriptBox["T", "3"]}], "+", 
                    RowBox[{"5", " ", 
                    SuperscriptBox["T", "2"]}], "-", 
                    RowBox[{"5", " ", "T"}], "-", "6"}], ")"}], " ", "X", " ", 
                    SuperscriptBox["z", "4"]}], "-", 
                    RowBox[{
                    FractionBox["1", "720"], " ", 
                    SuperscriptBox["z", "5"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    SuperscriptBox["T", "5"], "+", 
                    RowBox[{"9", " ", 
                    SuperscriptBox["T", "4"]}], "+", 
                    RowBox[{"25", " ", 
                    SuperscriptBox["T", "3"]}], "+", 
                    RowBox[{"15", " ", 
                    SuperscriptBox["T", "2"]}], "-", 
                    RowBox[{"26", " ", "T"}], "-", "24"}], ")"}], " ", "X"}], 
                    ")"}]}], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox["z", "6"], ")"}], 
                    SeriesData[$CellContext`z, 0, {}, 0, 6, 1], Editable -> 
                    False]}], 
                  RowBox[{"SeriesData", "[", 
                    RowBox[{"z", ",", "0", ",", 
                    RowBox[{"{", 
                    RowBox[{"X", ",", 
                    RowBox[{
                    RowBox[{"-", 
                    FractionBox["1", "2"]}], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "1"}], "+", "T"}], ")"}], " ", "X"}], ",", 
                    RowBox[{
                    FractionBox["1", "6"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "1"}], "+", 
                    SuperscriptBox["T", "2"]}], ")"}], " ", "X"}], ",", 
                    RowBox[{
                    RowBox[{"-", 
                    FractionBox["1", "24"]}], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "2"}], "-", "T", "+", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["T", "2"]}], "+", 
                    SuperscriptBox["T", "3"]}], ")"}], " ", "X"}], ",", 
                    RowBox[{
                    FractionBox["1", "120"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "6"}], "-", 
                    RowBox[{"5", " ", "T"}], "+", 
                    RowBox[{"5", " ", 
                    SuperscriptBox["T", "2"]}], "+", 
                    RowBox[{"5", " ", 
                    SuperscriptBox["T", "3"]}], "+", 
                    SuperscriptBox["T", "4"]}], ")"}], " ", "X"}], ",", 
                    RowBox[{
                    RowBox[{"-", 
                    FractionBox["1", "720"]}], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "24"}], "-", 
                    RowBox[{"26", " ", "T"}], "+", 
                    RowBox[{"15", " ", 
                    SuperscriptBox["T", "2"]}], "+", 
                    RowBox[{"25", " ", 
                    SuperscriptBox["T", "3"]}], "+", 
                    RowBox[{"9", " ", 
                    SuperscriptBox["T", "4"]}], "+", 
                    SuperscriptBox["T", "5"]}], ")"}], " ", "X"}]}], "}"}], 
                    ",", "0", ",", "6", ",", "1"}], "]"}]}, "SeriesData", 
                 DisplayFunction -> (#& ), InterpretationFunction -> (#2& ), 
                 SyntaxForm -> Plus]}, {
                StyleBox[
                 
                 RowBox[{
                  "\"(\"", "\[NoBreak]", "\"Taylor series\"", "\[NoBreak]", 
                   "\")\""}], {FontFamily -> "Verdana", FontSize -> 10, 
                  GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}, StripOnInput -> False]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More terms", "input" -> 
         "SeriesExpansionAtZ = 0__More terms"}, {}]}]}], Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {True, False, {False}, True},
    Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "2", "datatypes" -> 
    "Series", "timedout" -> "", "timedoutpods" -> "", "timing" -> "5.538", 
    "parsetiming" -> "3.734", "parsetimedout" -> "false", "recalculate" -> "",
     "id" -> "MSPa6331e321d58if4gc89c00002i8bd17hdf3ad8a0", "host" -> 
    "http://www5a.wolframalpha.com", "server" -> "8", "related" -> 
    "http://www5a.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa6341e321d58if4gc89c00005c3cced6342929be&s=8", "version" -> "2.6", 
    "profile" -> "EnterDoQuery:0.,StartWrap:5.53782"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> -5., 
    "Date" -> {2016, 2, 21, 10, 44, 12.88632`7.86270389766433}, "Line" -> 39, 
    "SessionID" -> 24653742985256794637}, Typeset`showpods$$ = {1, 2}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = False, 
   Typeset`newq$$ = 
   "series (((z + 1)^T)^(1/T) - z - 1) + (X ((z + 1)^T)^(1/T - 1) ((z + 1)^T \
- 1))/(T z) for around z=0"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$}, {Typeset`aux1$$, Typeset`aux2$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{651., {133., 139.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; 
     WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print",
 CellMargins->{{20, 10}, {Inherited, Inherited}},
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellChangeTimes->{3.6650582529460506`*^9, 3.66535749043725*^9}]
}, Open  ]]
},
WindowSize->{718, 856},
WindowMargins->{{Automatic, 0}, {Automatic, 0}},
FrontEndVersion->"9.0 for Mac OS X x86 (32-bit, 64-bit Kernel) (January 25, \
2013)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[579, 22, 80685, 1598, 78, "WolframAlphaShortInput"],
Cell[81267, 1622, 251, 9, 48, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[81555, 1636, 256, 7, 28, "Input"],
Cell[81814, 1645, 561, 20, 57, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[82412, 1670, 249, 7, 28, "Input"],
Cell[82664, 1679, 268, 8, 57, "Output"]
}, Open  ]],
Cell[82947, 1690, 89, 1, 46, "Input"],
Cell[CellGroupData[{
Cell[83061, 1695, 17997, 441, 61, "WolframAlphaShortInput"],
Cell[101061, 2138, 1998, 59, 86, "Output"],
Cell[103062, 2199, 25499, 550, 622, "Print"]
}, Open  ]],
Cell[CellGroupData[{
Cell[128598, 2754, 15012, 368, 61, "WolframAlphaShortInput"],
Cell[143613, 3124, 3018, 95, 123, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[146668, 3224, 460, 15, 42, "WolframAlphaLong"],
Cell[147131, 3241, 25409, 544, 594, "Print"]
}, Open  ]],
Cell[CellGroupData[{
Cell[172577, 3790, 567, 19, 42, "WolframAlphaLong"],
Cell[173147, 3811, 12385, 264, 271, "Print"]
}, Open  ]],
Cell[CellGroupData[{
Cell[185569, 4080, 20446, 494, 76, "WolframAlphaShortInput"],
Cell[206018, 4576, 13830, 264, 232, "Print"]
}, Open  ]],
Cell[CellGroupData[{
Cell[219885, 4845, 292, 8, 46, "Input"],
Cell[220180, 4855, 129, 2, 28, "Output"]
}, Open  ]],
Cell[220324, 4860, 197, 3, 97, "Input"],
Cell[CellGroupData[{
Cell[220546, 4867, 20057, 487, 61, "WolframAlphaShortInput"],
Cell[240606, 5356, 5779, 181, 286, "Output"]
}, Open  ]],
Cell[246400, 5540, 101, 1, 28, "Input"],
Cell[246504, 5543, 92, 1, 28, "Input"],
Cell[CellGroupData[{
Cell[246621, 5548, 929, 31, 60, "WolframAlphaShort"],
Cell[247553, 5581, 13704, 294, 282, "Print"]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
